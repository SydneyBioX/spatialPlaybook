# Classification

When it comes to biological datasets, the end goal is either mechanistic or translational. For example, if we had a mechanistic end goal, we might want to find what genes are differentially expressed between two conditions, and further aim to characterise the pathways which lead to this differential expression. Alternatively, if the end goal is translational, we might want to use a biological dataset that can be relatively cheaply obtained (e.g. IMC) to predict whether a patient's disease will progress or not progress (e.g. metastasize in cancer).

Steps:

1.  Introduction to ClassifyR
2.  Classification of patients by condition
3.  Classification of patients by survival
4.  Easy and Hard to classify patients (samplesMetricMap)
5.  Maximising accuracy during classification (parameter tuning for crossValidate)

## Introduction to `ClassifyR`

[ClassifyR](https://www.bioconductor.org/packages/release/bioc/html/ClassifyR.html) provides a structured pipeline for cross-validated classification. Classification is viewed in terms of four stages: data transformation, feature selection, classifier training, and prediction. The driver functions crossValidate and runTests implements varieties of cross-validation. They are:

* Permutation of the order of samples followed by k-fold cross-validation 
* Repeated $x\%$ test set cross-validation
* leave-k-out cross-validation

## Classification of patients by condition

We will use the Keren 2018 dataset to classify a patient's tumour into one of three types: cold, compartmentalised, and mixed. 

```{r, message=FALSE,warning=FALSE}
library(ClassifyR)
library(lisaClust)

BPPARAM <- simpleSeg:::generateBPParam(cores = 10)

# load the Keren 2018 dataset
kerenSPE <- SpatialDatasets::spe_Keren_2018()
```

We will build a list of feature matrices using the features we've generated in the previous chapters:

1. Cell type proportions
2. Cell type co-localistion using the L-function (spicyR)
3. Cell type co-localisation with respect to a parent (Kontextual)
4. Spatial domains (lisaClust)
5. Marker means in each cell type (Statial)
6. Marker means in each cell type in each region (Statial)
7. Proximity-associated changes in marker expression (SpatioMark)

```{r, eval = FALSE, include =FALSE}
data <- list()

# Cell type proportion (FuseSOM)
data[["Proportions"]] <- getProp(kerenSPE, "cellType")
# Cell localisation (spicyR)
data[["SpicyR"]] <- getPairwise(kerenSPE, 
                        BPPARAM = BPPARAM)
# Cell localisation with respect to a parent (Kontextual)
data[["LisaClust"]] <- getProp(lisaClust(kerenSPE, k = 5), "region")
# Spatial Domains (lisaClust)

# Marker means in each cell type (Statial)

# Marker means in each cell type in each region (Statial)

# Proximity-associated changes in marker expression (SpatioMark)

```
