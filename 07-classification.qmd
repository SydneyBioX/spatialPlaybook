# Finding associations between clinical variables and spatial features

```{r 07-code chunk timing, include = FALSE}
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "secs")
      # return a character string to show the time in bold and right-aligned, with extra spacing
      paste("<div style='text-align: right;'><em>Time for this code chunk to run with ", nCores, "cores: ", round(res, 2), "s</div></em>")
    }
  }
}))
```

Classification models play a central role in spatial omics by identifying features that distinguish between patient groups—advancing both mechanistic understanding and clinical stratification. These distinguishing features can capture a wide range of biological signals, from differences in tissue architecture and cell-cell interactions to variations in cell state or microenvironment composition. Depending on the aim, analyses may seek to explain the underlying biology of a condition or to build predictive models for clinical outcomes such as progression, metastasis, or therapeutic response.

However, due to biological heterogeneity, not all features are informative across all individuals. To address this, robust modelling frameworks must accommodate complex, subgroup-specific signals. This ensures that models not only perform well statistically but also yield biologically and clinically meaningful insights. `ClassifyR` provides such a framework, offering tools for feature selection, repeated cross-validation, performance evaluation, survival analysis, and integration across multiple data types. It is designed to rigorously assess which features predict outcomes, and for which subgroups, thereby enhancing both discovery and translational potential.

To build these models, it is essential to first summarise each tissue sample in terms of meaningful, comparable features. This is where the `scFeatures` package plays a complementary role. `scFeatures` generates a rich and diverse set of sample-level features that capture both spatial and non-spatial characteristics—including spatial organisation, cell-type proportions, expression variability, pathway activity, and more. Many of these features are derived from the spatial metrics computed earlier in this playbook. By creating a comprehensive feature set, `scFeatures` increases the likelihood of identifying biologically relevant patterns and supports multi-view modelling strategies.

In this section, we demonstrate how `scFeatures` can be used to generate interpretable, high-dimensional representations of spatial omics data, and how these can be combined with `ClassifyR` to construct and evaluate predictive models of patient outcome.

<!-- Steps: -->

<!-- 1.  Introduction to ClassifyR -->

<!-- 2.  Classification of patients by condition -->

<!-- 3.  Classification of patients by survival -->

<!-- 4.  Easy and Hard to classify patients (samplesMetricMap) -->

<!-- 5.  Maximising accuracy during classification (parameter tuning for crossValidate) -->

```{r 07-load libraries, echo=FALSE, results="hide", warning=FALSE}
suppressPackageStartupMessages({
  library(ClassifyR)
  library(lisaClust)
  library(Statial)
  library(spicyR)
  library(ggplot2)
  library(scFeatures)
})
```

```{r 07-libraries, eval = FALSE}
library(ClassifyR)
library(lisaClust)
library(Statial)
library(spicyR)
library(ggplot2)
library(scFeatures)
```

```{r 07-set parameters}
# set parameters
set.seed(51773)
use_mc <- TRUE
if (use_mc) {
  nCores <- max(parallel::detectCores()/2, 1)
} else {
  nCores <- 1
}
BPPARAM <- simpleSeg:::generateBPParam(nCores)
theme_set(theme_classic())
```

## Introduction to `ClassifyR`

[ClassifyR](https://www.bioconductor.org/packages/release/bioc/html/ClassifyR.html) provides a structured pipeline for cross-validated classification. Classification is viewed in terms of four stages: data transformation, feature selection, classifier training, and prediction. The driver functions `crossValidate` and `runTests` implements varieties of cross-validation. They are:

-   Permutation of the order of samples followed by k-fold cross-validation
-   Repeated $x\%$ test set cross-validation
-   leave-k-out cross-validation

We will use the Keren 2018 dataset to perform two predictions: 1) predict the patient's tumour type (compartmentalised or mixed) and 2) predict the patient's survival outcome.

```{r 07-load keren dataset, message=FALSE,warning=FALSE}
# load the Keren 2018 dataset
kerenSPE <- SpatialDatasets::spe_Keren_2018()

# remove any missing data in our outcome columns
kerenSPE = kerenSPE[, complete.cases(colData(kerenSPE)[, c("Censored", "Survival_days_capped*",
                                                           "tumour_type")])]
# load pre-computed data for efficiency
kontextMat <- readRDS("data/kontextMat.rds")
stateMat <- readRDS("data/stateMat.rds")
```

## Introduction to `scFeatures`

[scFeatures](https://www.bioconductor.org/packages/release/bioc/html/scFeatures.html) allows us to generate up to 17 sample-level metrics, including cell type proportions, cell type-specific marker expressions, cell type-specific pathway expressions, cell type-specific cell-cell communications, and overall aggregated marker expressions.

<img src="images/scFeatures_fig1.jpeg" align="center" style="height: 300px; border: 0px"/>

Here, we will use `scFeatures` to generate two sample-level metrics: `proportion_raw`, the proportion of cell types within each sample or image, and `gene_mean_celltype`, which captures cell type-specific marker expression.

## Classification of patients by condition

We will use the Keren 2018 dataset to classify a patient's tumour into one of two types: compartmentalised and mixed. First, we will filter out all cases which had cold tumours.

```{r 07-filter out cold tumours}
# filter out cold tumours
kerenSPE = kerenSPE[, colData(kerenSPE)$tumour_type != "cold"]
kerenSPE$tumour_type = droplevels(kerenSPE$tumour_type)
levels(kerenSPE$tumour_type) = c("compartmentalised", "mixed")

kontextMat = kontextMat[rownames(kontextMat) %in% unique(kerenSPE$imageID), ]
stateMat = stateMat[rownames(stateMat) %in% unique(kerenSPE$imageID), ]
```

We will build a list of feature matrices using the features we've generated in the previous chapters, including the two metrics generated through `scFeatures`:

1.  Co-localisation between pairs of cell types using the L-function (`spicyR`)
2.  Cell type co-localisation with respect to a parent population using `Kontextual` (`Statial`)
3.  Regions of co-localisation, or spatial domains (`lisaClust`)
4.  Marker means in each cell type (`Statial`)
5.  Proximity-associated changes in marker expression using SpatioMark (`Statial`)
6.  Cell type proportions (`scFeatures`)
7.  Cell type-specific marker expression (`scFeatures`)

```{r 07-feature matrices, time_it = TRUE}
# pre-generated spatial metrics
data <- list()

# Cell localisation (spicyR)
data[["spicyR"]] <- getPairwise(kerenSPE,
                                BPPARAM = BPPARAM) |> as.data.frame()

# Cell localisation with respect to a parent (Kontextual)
data[["Kontextual"]] <- kontextMat

# Spatial Domains (lisaClust)
data[["lisaClust"]] <- getProp(lisaClust(kerenSPE, k = 5,
                                         BPPARAM = BPPARAM), "region")

# Marker means in each cell type (Statial)
data[["cellTypeMarkerMeans"]] <- getMarkerMeans(kerenSPE, imageID = "imageID",
                                      cellType = "cellType",
                                        region = "cellType")

# Proximity-associated changes in marker expression (SpatioMark)
data[["SpatioMark"]] <- stateMat
```

We will now use `scFeatures` to generate our two selected features. Below, we use the `scFeatures` function and specify `type = "spatial_p"` to indicate we are using spatial proteomics data.

```{r 07-scFeatures}
# generate assay matrix and add spatial features
keren_mat = assay(kerenSPE) |> as.matrix()

# generate spatial coords vectors
x = spatialCoords(kerenSPE)[, 1] |> as.vector()
y = spatialCoords(kerenSPE)[, 2] |> as.vector()

# scFeatures
scfeatures_result <- scFeatures(data = keren_mat, 
                                sample = kerenSPE$imageID, 
                                celltype = kerenSPE$cellType,
                                spatialCoords = list(x, y),
                                feature_types = c("proportion_raw", "gene_mean_celltype")  , 
                                type = "spatial_p",  
                                ncores = nCores,  
                                species = "Homo sapiens")

# add to our list of feature matrices
data[["proportions"]] = scfeatures_result$proportion_raw
data[["cellTypeMarkerMeans"]] = scfeatures_result$gene_mean_celltype
```

We will then generate a factor vector of our outcome variable.

```{r 07-outcome vector}
# outcome vector
outcome = kerenSPE$tumour_type[!duplicated(kerenSPE$imageID)]
names(outcome) = kerenSPE$imageID[!duplicated(kerenSPE$imageID)]

head(outcome, 5)
```

`ClassifyR` provides a convenient function, `crossValidate`, to build and test models. `crossValidate` must be supplied with `measurements`, a simple tabular data container or a list-like structure of such related tabular data on common samples. It can be in the form of a `matrix`, `data.frame`, `DataFrame`, `MultiAssayExperiment` or a list of `data.frames`.

`crossValidate` must also be supplied with `outcome`, which represents the prediction to be made. `outcome` can be either a factor containing the class labels for each observation, or a `character` of length 1 that matches a column name in `measurements` which holds the classes. If a `character` is provided, `crossValidate` will automatically remove the classes before training.

By default, `crossValidate` will build and train a random forest. Alternative classifiers can be specified using the `classifier` argument. To view all available feature selection and classification approaches, use the `available` function.

```{r 07-cv, time_it = TRUE}
# perform 50 repeats of 5-fold cross-validation
cv = crossValidate(measurements = data,
                   outcome = outcome,
                   nFolds = 5,
                   nRepeats = 50,
                   nCores = nCores)
```

We can use `performancePlot` to visualise performance metrics for all our features. Here, we visualise the AUC for each of the seven feature matrices we tested. Additional performance metrics can be specified in the `metric` argument.

```{r 07-performance plot, fig.width = 14, fig.height = 6, warning = FALSE, message = FALSE}
performancePlot(
  cv,
  metric = "AUC",
  characteristicsList = list(x = "Assay Name"),
  orderingList = list("Assay Name" = c("spicyR", "lisaClust", "Kontextual", "SpatioMark", "proportions", "cellTypeMarkerMeans"))) 
```

From the graph, both `lisaClust` and `proportions` appear to capture information which is predictive of the tumour type of patients.

## Classification of patients by survival

`crossValidate` also has the capacity to test classification performance for a survival outcome. In this case, `outcome` must be a `Surv` object of the same length as the number of samples in the feature matrix and should contain information about the time and censoring of the samples. Alternatively, we can specify `outcome` to be a `character` of length 2 or 3 that each match a column name in a data frame which holds information about the time and censoring of the samples. The time-to-event columns will automatically be removed before training is done.

We will first add a `survival` column to the `kerenSPE` object.

```{r 07-survival data}
# create a Surv object named "survival"
kerenSPE$event = 1 - kerenSPE$Censored
kerenSPE$survival = Surv(kerenSPE$`Survival_days_capped*`, kerenSPE$event)

# outcome vector
surv_outcome = kerenSPE$survival[!duplicated(kerenSPE$imageID)]
names(surv_outcome) = kerenSPE$imageID[!duplicated(kerenSPE$imageID)]

surv_outcome
```

We can then run `crossValidate` and specify the outcome to be `surv_outcome`, and use `performancePlot` to visualise the performance of the cross-validation. Since we are performing survival analysis, we will specify `metric = "C-index"`.

```{r 07-survival cv, fig.width = 12, fig.height = 6, warning = FALSE, message = FALSE}
# perform 50 repeats of 5-fold cross-validation
surv_cv = crossValidate(measurements = data,
                   outcome = surv_outcome,
                   nFolds = 5,
                   nRepeats = 50,
                   nCores = nCores)

performancePlot(surv_cv,
  metric = "C-index",
  characteristicsList = list(x = "Assay Name"),
  orderingList = list("Assay Name" = c("spicyR", "lisaClust", "Kontextual", "SpatioMark", "proportions", "cellTypeMarkerMeans"))
)
```

From the graph, we can see that `lisaClust` appears to capture information that is predictive of survival outcomes comparatively well.

## Easy and hard to classify patients

The `samplesMetricMap` function allows visual comparison of sample-wise error rates or accuracy measures from the cross-validation process, helping to identify which samples are consistently well-classified and which are not.

### Predicting tumour type

```{r, 07-samples metric map, fig.width=15, warning = FALSE, message = FALSE}
samplesMetricMap(cv,  
                 classColours = c("#3F48CC", "#880015"),
                 metricColours = list(c("#FFFFFF", "#CFD1F2", "#9FA3E5", "#6F75D8", "#3F48CC"),
                                      c("#FFFFFF", "#E1BFC4", "#C37F8A", "#A53F4F", "#880015")))
```

This plot highlights samples that are challenging to classify, providing an opportunity to investigate sources of ambiguity. For instance, patients 36 and 13 were particularly difficult to classify. These cases might benefit from additional clinical review or closer inspection of spatial and molecular features not captured in the current feature set. Overall, both cell type proportions (`proportion_raw`) and spatial domains (`lisaClust`) performed well for tumour type classification. Interestingly, compartmentalised tumours were generally easier to classify than mixed tumours, suggesting a stronger or more consistent spatial signal.

### Predicting survival outcomes

We can also use `sampleMetricMap` to identify samples that were difficult to classify with respect to a survival outcome.

```{r 07-samples metric map survival, fig.width = 12, warning=FALSE, message=FALSE}
samplesMetricMap(surv_cv)
```

In the survival classification task, patient 35 stood out as a difficult case, while samples 31 through 20 were better classified, particularly by `lisaClust`-derived features. This suggests that spatial domain organisation may carry prognostic value in this dataset.

Samples identified as hard to classify offer valuable opportunities for further exploration:

- **Feature enrichment**: Re-examine these samples to see if they possess atypical spatial structures or marker expression profiles that were not well captured by the current feature set. Incorporating additional spatial or morphological features () may improve model sensitivity.

Biological subgrouping: Difficult-to-classify samples may represent intermediate or mixed phenotypes. Cluster these cases separately to explore whether they define a distinct subgroup or transition state, especially relevant in diseases with high heterogeneity.

External validation: If another cohort is available, assess whether the same samples or subgroups remain difficult to classify, which may help distinguish model-specific from biologically meaningful ambiguity.

Manual annotation: Engage domain experts to manually review spatial images of ambiguous cases for insights into unmodeled variation, such as rare cell types, artefacts, or unexpected tissue features.

Integrative modelling: Combine spatial features with other data modalities (e.g., genomics, transcriptomics, pathology annotations) to test whether multi-modal integration resolves classification uncertainty in these samples.



````{=html}
<-- ## Maximising accuracy during classification

Some feature ranking methods and classifiers allow for the adjustment of tuning parameters that control aspects of the model's learning process. For example, in a linear Support Vector Machine (SVM), the tuning parameter is the cost, which determines the penalty for misclassifications. Higher cost values increase the penalty, leading to fewer misclassifications.

In addition to parameter tuning, feature selection is performed by ranking features and testing a range of top-ranked features to identify the optimal subset for the best performance. This range is defined by the nFeatures list element, while the performance evaluation metric, such as Balanced Accuracy, is specified by the performanceType list element.

As a result, some level of parameter tuning is always involved, even when the feature ranking or classifier function itself does not have explicit tuning parameters.

In ClassifyR, tuning is performed by providing a variable called `tuneParams` to the `SelectParams` or `TrainParams` constructors. There are five constructors in ClassifyR -

-   `CrossValParams`: create an object to store parameters for cross-validation
-   `ModellingParams`: create an object to store parameters for data modelling
-   `SelectParams`: create an object to store parameters for feature selection
-   `TrainParams`: create an object to store parameters for classifier training
-   `PredictParams`: create an object to store parameters for making predictions

`tuneParams` is a named list, where each name corresponds to a tuning variable, except for one named `performanceType`, which specifies the performance metric to optimise. Any non-sample-specific performance metric calculated by `calcCVperformance` can be used for this optimisation.

```{r 07-create parameter sets}
# create a vector of costs for SVM
tuneList <- list(cost = c(0.1, 0.2))

# set cross-validation parameters
crossValParams <- CrossValParams(permutations = 5, tuneMode = "Resubstitution")

# set modelling parameters
SVMparams <- ModellingParams(trainParams = TrainParams("SVM", kernel = "linear", 
                                                       tuneParams = tuneList),
                             predictParams = PredictParams("SVM"))

```

Once we've specified our parameters of interest, we can use the `runTests` function to perform classification schemes. `runTests` allows greater control over all aspects of cross-validation compared to `crossValidate`. `runTests` requires a single matrix of observations and features to be passed to `measurements`.

```{r 07-run tests, eval = FALSE}
SVMresults <- runTests(data$lisaClust |> DataFrame(), 
                       outcome, crossValParams, SVMparams)
```

The index of chosen of the parameters, as well as all combinations of parameters and their associated performance metric, are stored for every validation, and can be accessed with the `tunedParameters` function.

```{r 07-tuned parameters, eval = FALSE}
tunedParameters(SVMresults)[1:5]
```
-->
````

In this way, we can predict clinical outcomes and identify samples that are hard to classify.

In subsequent sections, we will demonstrate how the end-to-end workflow can be applied to a single dataset in the form of case studies.

# sessionInfo

```{r}
sessionInfo()
```
