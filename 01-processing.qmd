# Cell segmentation and pre-processing

```{r 01-code chunk timing, include = FALSE}
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "secs")
      # return a character string to show the time in bold and right-aligned, with extra spacing
      paste("<div style='text-align: right;'><em>Time for this code chunk to run with ", nCores, "cores: ", round(res, 2), "s</div></em>")
    }
  }
}))
```

The typical first step in analysing spatial data is cell segmentation, which involves identifying and isolating individual cells in each image. This defines the basic units (cells) on which most downstream omics analysis is performed.

There are multiple approaches to cell segmentation. One approach involves segmenting the nuclei using intensity-based thresholding of a nuclear marker (such as DAPI or Histone H3), followed by watershedding to separate touching cells. The segmented nuclei are then expanded by a fixed or adaptive radius to approximate the full cell body. While this method is straightforward and widely used, especially when only nuclear staining is available, it assumes uniform cell size and shape, which may not hold in heterogeneous tissues.

When membrane or cytoplasmic markers are present, they can be used to directly segment the full cell body. This provides a more accurate representation of cell shape and size, particularly in tissues where cells are irregular or closely packed.

The choice of segmentation strategy depends on tissue structure, cell density, imaging resolution, and the biological questions at hand. In densely packed tissues such as epithelium or tumour microenvironments, clear boundary definition is challenging, and over-segmentation is often preferred to minimise signal spillover. In contrast, broader segmentation may be more appropriate in sparse tissues to capture full cell morphology. This trade-off is especially important when analysing membrane or cytoplasmic markers, where accurate capture of the cell body is essential to avoid background contamination or misattribution of signal.

To balance marker quantification and minimise spillover, we recommend nuclear segmentation followed by fixed-radius dilation to approximate the cytoplasm. In this section, we demonstrate how the `simpleSeg` package implements this approach, and outline additional options for users requiring greater flexibility.

```{r 01-load libraries, echo=FALSE, results="hide", warning=FALSE}
suppressPackageStartupMessages({
  library(cytomapper)
  library(ggplot2)
  library(simpleSeg)
})
```

```{r 01-libraries, eval = FALSE}
# load required libraries
library(cytomapper)
library(ggplot2)
library(simpleSeg)
```

The code below automatically detects the number of available CPU cores on your system and configures parallel processing accordingly. If you're on a Windows machine, it uses a socket-based backend (`SnowParam`), while Unix-based systems (macOS/Linux) use a fork-based backend (`MulticoreParam`).

If only one core is available or parallel execution is disabled, it defaults to serial processing. We recommend using at least 2 cores as parts of the workflow can be computationally intensive. If you do not wish to use multiple cores, you can set `use_mc = FALSE`.

```{r 01-set parameters}
# set parameters
set.seed(51773)

# whether to use multiple cores (recommended)
use_mc = TRUE
is_windows = .Platform$OS.type == "windows"

if (use_mc) {
  nCores = max(ceiling(parallel::detectCores() / 2), 1)
  
  if (nCores == 1) {
    BPPARAM = BiocParallel::SerialParam()
  } else if (is_windows) {
    BPPARAM = BiocParallel::SnowParam(workers = nCores, type = "SOCK")
  } else {
    BPPARAM = BiocParallel::MulticoreParam(workers = nCores)
  }
} else {
  BPPARAM = BiocParallel::SerialParam()
}

theme_set(theme_classic())
```

## Reading in data with `cytomapper`

We will be using the [Ferguson 2022](datasets.qmd) dataset to demonstrate how to perform pre-processing and cell segmentation. This dataset can be accessed through the `SpatialDatasets` package and is available in the form of single-channel TIFF images. In single-channel images, each pixel represents intensity values for a single marker. The `loadImages` function from the `cytomapper` package can be used to load all the TIFF images into a `CytoImageList` object. We then store the images as an h5 file on-disk in a temporary directory using the `h5FilesPath = HDF5Array::getHDF5DumpDir()` parameter.

We will also assign the metadata columns of the `CytoImageList` object using the `mcols` function.

```{r 01-load images, time_it = TRUE, warning = FALSE, message = FALSE}
pathToZip <- SpatialDatasets::Ferguson_Images()
pathToImages <- "data/processing/images"
unzip(pathToZip, exdir = "data/processing/images")

# store images in a CytoImageList on_disk as h5 files to save memory
images <- cytomapper::loadImages(
  pathToImages,
  single_channel = TRUE,
  on_disk = TRUE,
  h5FilesPath = HDF5Array::getHDF5DumpDir(),
  BPPARAM = BPPARAM
)

# assign metadata columns
mcols(images) <- S4Vectors::DataFrame(imageID = names(images))
```

When reading the image channels directly from the names of the TIFF images, they will often need to be cleaned for ease of downstream processing. The channel names can be accessed from the `CytoImageList` object using the `channelNames` function.

```{r 01-clean channel names}
channelNames(images) <- channelNames(images) |>
                          # remove preceding letters
                          sub(pattern = ".*_", replacement = "", x = _) |> 
                          # remove the .ome
                          sub(pattern = ".ome", replacement = "", x = _)
```

Similarly, the image names will be taken from the folder name containing the individual TIFF images for each channel. These will often also need to be cleaned.

```{r 01-clean image names}
# cleaning image names to obtain image IDs
split_names <- function(x) {
  sapply(strsplit(x, "_"), `[`, 3)
}

names(images) <- names(images) |> split_names()
mcols(images) <- S4Vectors::DataFrame(imageID = names(images))
```

## Cell segmentation with simpleSeg

For the sake of simplicity and efficiency, we will be subsetting the images down to 10 images.

```{r 01-subset images}
images <- images[1:10]
```

Next, we can perform our segmentation. The [simpleSeg](https://www.bioconductor.org/packages/release/bioc/html/simpleSeg.html) package on Bioconductor provides functionality for user friendly, watershed based segmentation on multiplexed cellular images based on the intensity of user-specified marker channels. The main function, `simpleSeg`, can be used to perform a simple cell segmentation process that traces out the nuclei using a specified channel.

In the particular example below, we have asked `simpleSeg` to do the following:

-   `nucleus = c("HH3")`: trace out the nuclei signal in the images using the HH3 channel.
-   `pca = TRUE`: segment out the nuclei mask using principal component analysis of all channels and using the principal components most aligned with the nuclei channel (in this case, HH3).
-   `cellBody = "dilate"`: use a dilation strategy of segmentation, expanding out from the nucleus by a specified `discSize`. In this case, `discSize = 3`, which means simpleSeg dilates out from the nucleus by 3 pixels.
-   `sizeSelection = 20`: ensure that only cells with a size greater than 20 pixels will be used.
-   `transform = "sqrt"`: perform square root transformation on each of the channels prior to segmentation.
-   `tissue = c("panCK", "CD45", "HH3")`: use the specified tissue mask to filter out all background noise outside the tissue mask. This allows us to ignore background noise which happens outside of the tumour core.

There are many other parameters that can be specified in `simpleSeg` (`smooth`, `watershed`, `tolerance`, and `ext`), and we encourage the user to select the parameters which best suit their biological context.

```{r 01-simpleSeg, time_it = TRUE}
masks <- simpleSeg(images,
                   nucleus = c("HH3"),
                   pca = TRUE,
                   cellBody = "dilate",
                   discSize = 3,
                   sizeSelection = 20,
                   transform = "sqrt",
                   tissue = c("panCK", "CD45", "HH3"),
                   cores = nCores)
```

### Visualise separation

We can examine the performance of the cell segmentation using the `display` and `colorLabels` functions from the `EBImage` package. If used in an interactive session, `display` allows you to zoom in and out of the image. In the image below, each distinct colour represents an individual segmented nucleus.

```{r 01-visualise segmentation}
# display image F3
EBImage::display(colorLabels(masks[[1]]))
```

### Visualise outlines

To assess segmentation accuracy, we can overlay the nuclei masks onto the corresponding nuclear intensity channel. Ideally, the mask outlines (shown in white in the image below) should closely align with the boundaries of the nuclear signal (visualised in blue), indicating that the segmentation correctly captures the extent of each nucleus. To do this, we can use the `plotPixels` function from the `cytomapper` package.

```{r 01-plot HH3}
plotPixels(image = images["F3"], 
           mask = masks["F3"],
           img_id = "imageID", 
           colour_by = c("HH3"), 
           display = "single",
           colour = list(HH3 = c("black","blue")),
           legend = NULL,
           bcg = list(
             HH3 = c(1, 1, 2)
           ))
```

Now is a good time to check whether we are **over-** or **under-segmenting**.

Over-segmentation happens when one cell or nucleus gets split into multiple smaller segments. This can lead to inflated cell counts and fragmented masks, which might skew your downstream analyses. Visually, you’ll see lots of small, irregular segments clustered where there should be just one cell.

Under-segmentation is the opposite — when two or more neighboring cells or nuclei are merged into a single segment. This causes under-counting and can hide important biological differences. You might notice large, oddly shaped masks covering what should be separate cells.

If you spot over- or under-segmentation in your images, adjusting the `discSize` parameter in the `simpleSeg` function can help. This controls the size of the dilation applied after nuclei segmentation, and tuning it can improve how well the masks approximate the actual cell boundaries.

It’s also useful to look at multiple markers at once — not just the nuclear marker (HH3) — to get a fuller picture of how well the segmentation masks fit the cells in your tissue. Below, we've visualised the same image with additional markers: HH3, CD31, FX111A.

```{r 01-plot markers}
plotPixels(image = images["F3"], 
           mask = masks["F3"],
           img_id = "imageID", 
           colour_by = c("HH3", "CD31", "FX111A"), 
           display = "single",
           colour = list(HH3 = c("black","blue"),
                         CD31 = c("black", "red"),
                         FX111A = c("black", "green")),
           legend = NULL,
           bcg = list(
             HH3 = c(1, 1, 2),
             CD31 = c(0, 1, 2),
             FX111A = c(0, 1, 1.5)
           ))
```

In the image above, our segmentation does a good job capturing the CD31 signal (red), but is less accurate for the FX111A signal (green). You can see areas where the FX111A signal extends beyond the boundaries of our segmentation masks. There are clear regions where the FX111A marker spills over the boundaries of our segmentation. We could rectify this by increasing the `discSize` to capture more of the cell body.

However, it’s important to consider **lateral spillover** — a common challenge in spatial analysis. Lateral spillover occurs when signal from one cell spreads into neighboring cells, causing the marker intensity to be incorrectly assigned to adjacent cells. This can happen due to the natural diffusion of cytoplasmic or membrane-bound proteins, limitations in segmentation accuracy, or imaging resolution.

Balancing the dilation size to capture the full cell body while minimising lateral spillover is therefore crucial. Overly large segmentation masks may increase spillover, while masks that are too small risk missing important cellular signals.

::: callout-tip
**What to look for and change to obtain an ideal segmentation**

1.  Does the segmentation capture the full nucleus? If not, perhaps you need to try a different transformation to improve the thresholding of the nuclei marker. You could also try using `pca = TRUE` which will borrow information across the markers to help find the nuclei.
2.  How much of the cell body is the segmentation missing? Try increasing the dilation around the nucleus by setting `discSize = 7`.
3.  Are the segmentations capturing neighbouring cells? Try decreasing the dilation to limit lateral spillover of marker signal by setting `discSize = 2`.
:::

In particular, the `cellBody` and `watershed` parameters can strongly influence the way cells are segmented using `simpleSeg`. We have provided further details on how the user may specify cell body identification and watershedding in the tables below.

As `simpleSeg` is a nuclei-based dilation method, it suffers from tissues where cells might be multi-nucleated, or where cells have non-circular or elliptical morphologies. For tissues where you might expect these cells, it may be preferable to choose a different segmentation method.

#### `cellBody` Parameters

| Method | Description |
|------------------------------------|:----------------------------------:|
| ["distance"]{style="font-family: 'Courier New', monospace;"} | [Performs watershedding on a distance map of the thresholded nuclei signal. With a pixels distance being defined as the distance from the closest background signal.]{style="font-family: 'Courier New', monospace;"} |
| ["intensity"]{style="font-family: 'Courier New', monospace;"} | [Performs watershedding using the intensity of the nuclei marker.]{style="font-family: 'Courier New', monospace;"} |
| ["combine"]{style="font-family: 'Courier New', monospace;"} | [Combines the previous two methods by multiplying the distance map by the nuclei marker intensity.]{style="font-family: 'Courier New', monospace;"} |

#### `watershed` Parameters

| Method | Description |
|------------------------------------|:----------------------------------:|
| ["dilation"]{style="font-family: 'Courier New', monospace;"} | [Dilates the nuclei by an amount defined by the user. The size of the dilatation in pixels may be specified with the `discDize` argument.]{style="font-family: 'Courier New', monospace;"} |
| ["discModel"]{style="font-family: 'Courier New', monospace;"} | [Uses all the markers to predict the presence of dilated 'discs' around the nuclei. The model therefore learns which markers are typically present in the cell cytoplasm and generates a mask based on this.]{style="font-family: 'Courier New', monospace;"} |
| ["marker"]{style="font-family: 'Courier New', monospace;"} | [The user may specify one or multiple dedicated cytoplasm markers to predict the cytoplasm. This can be done using `cellBody = "marker name"/"index"`]{style="font-family: 'Courier New', monospace;"} |
| ["None"]{style="font-family: 'Courier New', monospace;"} | [The nuclei mask is returned directly.]{style="font-family: 'Courier New', monospace;"} |

<!-- ## Cell segmentation with BIDCell -->

<!-- ## Visual comparison of segmentations -->

<!-- plotPixels can plot multiple images \<-- use this to visualise multiple images at once after you have BIDCell ready. -->

## Summarise cell features

In the Bioconductor ecosystem, the `SingleCellExperiment` and `SpatialExperiment` classes are widely used data structures for storing single-cell and spatially resolved data, along with associated metadata. We recommend using these formats for downstream analysis in R, as they are well-supported across many packages.

To extract per-cell measurements from segmentation masks, we can use the `measureObjects` function from the `cytomapper` package. This calculates the average intensity of each channel within each cell, along with various morphological features. By default, `measureObjects` returns a `SingleCellExperiment`, where channel intensities are stored in the counts assay, and spatial coordinates are included in `colData` under the `m.cx` and `m.cy` columns.

Alternatively, setting `return_as = "spe"` will return a `SpatialExperiment` object instead. In this format, spatial coordinates are stored in the `spatialCoords` slot, which simplifies integration with spatial analysis workflows and plotting functions. For this demonstration, we’ll use the SpatialExperiment format.

```{r 01-measure objects, time_it = TRUE}
# summarise the expression of each marker in each cell
cells <- cytomapper::measureObjects(masks,
                                    images,
                                    img_id = "imageID",
                                    return_as = "spe",
                                    BPPARAM = BPPARAM)

spatialCoordsNames(cells) <- c("x", "y")

cells
```

In the next section, we’ll look at performing quality control, data transformation, and normalisation to account for technical variation and prepare the data for analysis.

## sessionInfo

```{r}
sessionInfo()
```
