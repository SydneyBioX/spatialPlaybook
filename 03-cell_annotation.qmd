# Cell Annotation

Labeling the identity of your cells is a key step in any spatial processing protocol in order to determine differential cell type compositions and changes which occur in specific cell types during disease. However, the method by which this is done can differ from study to study. Here, we demonstrate the use of two packages: `FuseSOM` for cell type clustering and `scClassify` for cell type annotation.

Steps:

1.  Clustering vs annotation
2.  Clustering with FuseSOM
3.  Cluster annotation with pheatmap
4.  Cell annotation with scClassify
5.  Selecting a reference dataset with scClassify

## Clustering vs Annotation

Clustering is an unsupervised method of labelling cells. An algorithm identifies clusters of similar cells based on marker expression patterns, and the resulting clusters need to be manually identified based on biological domain knowledge. Cell annotation is a supervised method which requires a separate, reference dataset. The algorithm uses the reference dataset to assign a cell type label to each cell in the dataset. There are advantages and disadvantages to both. We will first demonstrate the use of both `FuseSOM` and `scClassify`, and then discuss how to choose between clustering and annotation.

## Clustering with FuseSOM

[FuseSOM](https://www.bioconductor.org/packages/release/bioc/html/FuseSOM.html) is an unsupervised clustering tool for highly multiplexed in situ imaging cytometry assays. It combines a `Self Organiszing Map` architecture and a `MultiView` integration of correlation-based metrics for robustness and high accuracy. It has been streamlined to accept multiple data structures including `SingleCellExperiment` objects, `SpatialExperiment` objects, and `DataFrames`.

### `FuseSOM` Matrix Input

To demonstrate the functionality of `FuseSOM`, we will use the Risom 2022 dataset, which profiles the spatial landscape of ductal carcinoma in situ (DCIS). We will be using the markers used in the original study to perform clustering.

```{r}
# load FuseSOM
library(FuseSOM)
library(scClassify)
library(STexampleData)
library(MLmetrics)

# load in the data
data("risom_dat")

# define the markers of interest
risomMarkers <- c('CD45','SMA','CK7','CK5','VIM','CD31','PanKRT','ECAD',
                   'Tryptase','MPO','CD20','CD3','CD8','CD4','CD14','CD68','FAP',
                   'CD36','CD11c','HLADRDPDQ','P63','CD44')

# we will be using the manual_gating_phenotype as the true cell type to gauge 
# performance
names(risom_dat)[names(risom_dat) == 'manual_gating_phenotype'] <- 'CellType'
```

Now that we have loaded the data and defined the markers of interest, we can run the `FuseSOM` algorithm using the `runFuseSOM()` function. We specify the number of clusters to be 23 based on prior domain knowledge. The output contains the cluster labels as well as the `Self Organizing Map` model.

```{r}
risomRes <- runFuseSOM(data = risom_dat, markers = risomMarkers, 
                        numClusters = 23)
```

Lets look at the distribution of the clusters.

```{r}
# get the distribution of the clusters
table(risomRes$clusters)/sum(table(risomRes$clusters))
```

It appears that 32% of cells have been assigned to `cluster_1`. Next, lets generate a heatmap of the marker expression for each cluster.

```{r, fig.align='center', fig.height=5, fig.width=6, dev='png'}
risomHeat <- FuseSOM::markerHeatmap(data = risom_dat, markers = risomMarkers,
                            clusters = risomRes$clusters, clusterMarkers = TRUE)
```

-   few comments analysing heatmap?

### Using `FuseSOM` to estimate the number of clusters

When the number of expected cell typess or clusters is not known beforehand, the `estimateNumCluster()` function can be used to estimate the number of clusters. Two methods have been developed to calculate the number of clusters:

1.  Discriminant based method:
    -   A method developed in house based on discriminant based maximum clusterability projection pursuit
2.  Distance based methods which includes:
    -   The Gap Statistic
    -   The Jump Statistic
    -   The Slope Statistic
    -   The Within Cluster Dissimilarity Statistic
    -   The Silhouette Statistic

We run `estimateNumCluster()` and specify `method = c("Discriminant", "Distance")` to use both approaches.

```{r}
# lets estimate the number of clusters using all the methods
# original clustering has 23 clusters so we will set kseq from 2:25
# we pass it the SOM model generated in the previous step
risomKest <- estimateNumCluster(data = risomRes$model, kSeq = 2:25, 
                                  method = c("Discriminant", "Distance"))

```

We can then use this result to determine the best number of clusters for this dataset based on the different metrics.

```{r}
# what is the best number of clusters determined by the discriminant method?
risomKest$Discriminant 
```

According to the Discriminant method, the optimal number of clusters is 7.

We can use the `optiPlot()` function to generate an elbow plot with the optimal value for the number of clusters for the distance based methods.

```{r}
# we can plot the results using the optiplot function
pSlope <- optiPlot(risomKest, method = 'slope')
pSlope
pJump <- optiPlot(risomKest, method = 'jump')
pJump
pWcd <- optiPlot(risomKest, method = 'wcd')
pWcd
pGap <- optiPlot(risomKest, method = 'gap')
pGap
pSil <- optiPlot(risomKest, method = 'silhouette')
pSil

```

From the plots, we see that the `Jump` statistic almost perfectly captures the correct number of clusters. The `Gap` statistic is a close second with 15 clusters. All the other methods significantly underestimate the number of clusters.

### `FuseSOM` with Single Cell Epxeriment object as input

The `FuseSOM` algorithm is also equipped to take in a `SingleCellExperiment` object as input. The results of the pipeline will be written to either the metada or the colData fields.

First, we create a `SingleCellExperiment` object using the Risom 2022 data.

```{r, message=FALSE, warning=FALSE}
library(SingleCellExperiment)

# create an SCE object using Risom 2022 data
colDat <- risom_dat[, setdiff(colnames(risom_dat), risomMarkers)]
sce <- SingleCellExperiment(assays = list(counts = t(risom_dat)),
                                 colData = colDat)

sce
```

Next, we pass it to the `runFuseSOM()` function. Here, we can provide the assay in which the data is stored (`counts`) and specify the column to store the clusters in using `clusterCol = "clusters"`. The `Self Organizing Map` that is generated will be stored in the metadata field.

```{r}
risomRessce <- runFuseSOM(sce, markers = risomMarkers, clusterCol = "clusters",
                          assay = 'counts', numClusters = 23, verbose = FALSE)

colnames(colData(risomRessce))
names(metadata(risomRessce))
```

Notice how the there is now a `clusters` column in the `colData` and a SOM field in the metadata.

If necessary, you can run `runFuseSOM()` with a new cluster number and specify a new `clusterCol`. If `clusterCol` contains a new name, the new clusters will be stored in the new column. Otherwise, it will overwrite the the current `clusters` column. Running FuseSOM on the same object will overwrite the SOM field in the metadata.

Just like before, we can plot a heatmap of the resulting clusters across all markers.

```{r}
data <- risom_dat[, risomMarkers] # get the original data used
clusters <- colData(risomRessce)$clusters # extract the clusters from the SCE object

# generate the heatmap
risomHeatsce <- markerHeatmap(data = risom_dat, markers = risomMarkers,
                            clusters = clusters, clusterMarkers = TRUE)
```

### Using `FuseSOM` to estimate the number of clusters for `SingleCellExperiment` objects

Just like before, we will use `estimateNumCluster()` on our Risom `SingleCellExperiment` object.

```{r}
# lets estimate the number of clusters using all the methods
# original clustering has 23 clusters so we will set kseq from 2:25
risomRessce <- estimateNumCluster(data = risomRessce, kSeq = 2:25, 
                                  method = c("Discriminant", "Distance"))

names(metadata(risomRessce))
```

The metadata now contains a `clusterEstimation` field which holds the results from the `estimateNumCluster()` function.

We can assess the results of cluster estimation as below.

```{r, fig.align='center', fig.height=5, fig.width=6, dev='png'}
# what is the best number of clusters determined by the discriminant method?
metadata(risomRessce)$clusterEstimation$Discriminant 
```

According to the discrminant method, the optimal number of clusters is 10.

```{r}
# we can plot the results using the optiplot function
pSlope <- optiPlot(risomRessce, method = 'slope')
pSlope
pJump <- optiPlot(risomRessce, method = 'jump')
pJump
pWcd <- optiPlot(risomRessce, method = 'wcd')
pWcd
pGap <- optiPlot(risomRessce, method = 'gap')
pGap
pSil <- optiPlot(risomRessce, method = 'silhouette')
pSil

```

Again, we see that the `Jump` statistic almost perfectly captures the correct number of clusters with 24 clusters. The `Gap` method is a close second with 15 clusters. All the other methods significantly underestimate the number of clusters.

## scClassify: Cell annotation

[scClassify](https://new.bioconductor.org/packages/release/bioc/html/scClassify.html) is a supervised multiscale classification framework for scRNAseq data based on ensemble learning and cell type hierarchies. scClassify first constructs a cell type tree using the reference dataset, and then builds an ensemble weighted kNN classifier at each node. Users can select any combination of six correlation/similarity metrics and five marker selection methods to build the kNN model. This results in up to 30 base classifiers that can be constructed for each node of the cell type tree.

To demonstrate the use of scClassify, we will use the Stickels 2021 dataset, which examines mouse brain tissue from the hippocampus and surrounding regions. It is available through the `STexampleData` package. We will select samples 21-24 for demonstration purposes.

```{r warning = FALSE, message = FALSE}
stickelsSPE = STexampleData::SlideSeqV2_mouseHPC()

# remove missing celltype values
stickelsSPE = stickelsSPE[, !is.na(stickelsSPE$celltype)]
stickelsSPE
```

The dataset contains 17 unique cell types.

```{r}
stickelsSPE$celltype |> unique()
```

As scClassify requires log-normalised expression data, we will use `normalizeCounts` from the `scuttle` package to transform and normalise our expression data.

```{r}
# log normalisation
norm_assay = normalizeCounts(stickelsSPE, transform = "log", BPPARAM = BiocParallel::MulticoreParam(workers = 8))

# store normalised expression data in the "norm" slot
assay(stickelsSPE, "norm") = norm_assay
```

We will first split the dataset into an 80% training or reference dataset and a 20% testing or query dataset.

```{r}
set.seed(51773)

# split into 80% reference and 20% query
ref_idx = sample(seq_len(ncol(stickelsSPE)), size = 0.8 * ncol(stickelsSPE))
ref_spe = stickelsSPE[, ref_idx]
query_spe = stickelsSPE[, -ref_idx]

# access expression data as matrix
ref_mat = assay(ref_spe, "norm")
query_mat = assay(query_spe, "norm")
```

`scClassify` is the main classification function within scClassify. It requires a reference expression matrix (`exprsMat_train`) and the corresponding vector of cell type labels as input (`cellTypes_train`). We then specify our query matrix (`exprsMat_test`) and the corresponding cell type labels (`cellTypes_test`) in the form of lists. Below, we have also specified the following customisations for building the model -

-   `tree = HOPACH`: use the HOPACH algorithm to build a cell type hierarchy.
-   `algorithm = WKNN`: use the weighted KNN model
-   `selectFeatures = c("limma")`: identify differentially expressed (DE) genes using `limma`, which will be used as features to build the WKNN model. Other options to select features include differentially variable (DV) genes, differentially distributed (DD), bimodally distributed (BI) and differentially expressed proportions.
-   `c("pearson", "spearman", "cosine")`: use Pearson and Spearman correlation to measure similarity between cells. Other options include Kendall's correlation, cosine distance, Jaccard distance, Manhattan distance, and weighted rank correlation.

```{r}
scClassify_res = scClassify(exprsMat_train = train_mat,
                            cellTypes_train = train_spe$celltype,
                            exprsMat_test = list(stickels = test_mat),
                            cellTypes_test = list(stickels = test_spe$celltype),
                            tree = "HOPACH",
                            algorithm = "WKNN",
                            selectFeatures = c("limma"),
                            similarity = c("pearson", "spearman"),
                            returnList = FALSE,
                            parallel = TRUE,
                            BPPARAM = BiocParallel::MulticoreParam(workers = 8),
                            verbose = FALSE)
```

The output is a list containing all model building and testing information. The `testRes` slot contains the results of testing the model on the query dataset, and the `trainRes` contains the model built from the reference dataset.

```{r}
scClassify_res$trainRes
```

We can then examine the cell type tree generated by the reference dataset.

```{r}
plotCellTypeTree(cellTypeTree(scClassify_res$trainRes))
```

The predictions for each cell can be accessed through the `ensembleRes` slot in the testing results.

```{r}
pred_mat = scClassify_res$testRes$stickels$ensembleRes |> as.data.frame()
head(pred_mat)
```

We will evaluate scClassify's performance using 4 metrics - accuracy, precision, recall, and F1 Score.

```{r}
# accuracy
MLmetrics::Accuracy(test_spe$celltype, pred_mat$cellTypes)
```

```{r}
# precision
MLmetrics::Precision(test_spe$celltype, pred_mat$cellTypes)
```

```{r}
# recall
MLmetrics::Recall(test_spe$celltype, pred_mat$cellTypes)
```

```{r}
# recall
MLmetrics::F1_Score(test_spe$celltype, pred_mat$cellTypes)
```

## Choosing between clustering and annotation

## sessionInfo

```{r}
sessionInfo()
```
