# Overview {.unnumbered}

## Welcome!

<img src="IMC_colon.png" align="right" style="height: 200px; border: 0px"/>

Recent advances in highly multiplexed cell imaging technologies such as *PhenoCycler, IMC, CosMx, Xenium, and MERFISH (and many more)* have fundamentally revolutionized our ability to observe complex cellular relationships in tissue. Where previous immunohistochemistry protocols only allowed the visualization of cells that could be characterized by two or three surface proteins, cutting-edge technologies characterize cells with upwards of 50 proteins or 1000s of RNA in situ. These technologies enable precise classification of cell sub-types and provide an unprecedented depiction of cellular heterogeneity in a tissue environment. These technical developments have necessitated the development of a variety of new analytical approaches that are required to harness these new imaging technologies. On this website we will demonstrate how packages in [scdney](https://sydneybiox.github.io/scdney/) can be used to provide new insights into complex biological systems and diseases.

## Packages

```{=html}


<link rel="stylesheet" href="css/hexagons.css">

<div id="importedContent"></div>
    <script>
        fetch('https://raw.githubusercontent.com/SydneyBioX/packageHeader/main/spatialHeader.html')
            .then(response => response.text())
            .then(htmlContent => {
                const importedContentDiv = document.getElementById('importedContent');
                importedContentDiv.innerHTML = htmlContent;
            })
            .catch(error => {
                console.error('Error fetching content:', error);
            });
    </script>
```

```{r echo=FALSE}
myCitation <- function (package = "base", lib.loc = NULL, auto = NULL) 
{

  if (!is.null(auto) && !is.logical(auto) && !anyNA(match(c("Package", 
                                                            "Version", "Title"), names(meta <- as.list(auto)))) && 
      !all(is.na(match(c("Authors@R", "Author"), names(meta))))) {
    auto_was_meta <- TRUE
    package <- meta$Package
  }
  else {
    auto_was_meta <- FALSE
    dir <- system.file(package = package, lib.loc = lib.loc)
    if (dir == "") 
      stop(packageNotFoundError(package, lib.loc, sys.call()))
    meta <- packageDescription(pkg = package, lib.loc = dirname(dir))
    citfile <- file.path(dir, "CITATION")
    test <- file_test("-f", citfile)
    if (!test) {
      citfile <- file.path(dir, "inst", "CITATION")
      test <- file_test("-f", citfile)
    }
    if (is.null(auto)) 
      auto <- !test
    if (!auto) {
      return(myReadCitationFile(citfile, meta))
    }
  }
  if ((!is.null(meta$Priority)) && (meta$Priority == "base")) {
    cit <- myCitation("base", auto = FALSE)
    attr(cit, "mheader")[1L] <- paste0("The ", sQuote(package), 
                                       " package is part of R.  ", attr(cit, "mheader")[1L])
    return(utils:::.citation(cit, package))
  }
  year <- sub("-.*", "", meta[["Date/Publication"]])
  if (!length(year) && !is.null(date <- meta[["Date"]])) {
    date <- trimws(as.vector(date))[1L]
    date <- strptime(date, "%Y-%m-%d", tz = "GMT")
    if (!is.na(date)) 
      year <- format(date, "%Y")
  }
  if (!length(year)) {
    date <- as.POSIXlt(sub(";.*", "", trimws(meta$Packaged)[1L]))
    if (!is.na(date)) 
      year <- format(date, "%Y")
  }
  if (!length(year)) {
    warning(gettextf("could not determine year for %s from package DESCRIPTION file", 
                     sQuote(package)), domain = NA)
    year <- NA_character_
  }
  author <- meta$`Authors@R`
  if (length(author)) {
    aar <- utils:::.read_authors_at_R_field(author)
    author <- Filter(function(e) {
      !(is.null(e$given) && is.null(e$family)) && !is.na(match("aut", 
                                                               e$role))
    }, aar)
    if (!length(author)) 
      author <- Filter(function(e) {
        !(is.null(e$given) && is.null(e$family)) && !is.na(match("cre", 
                                                                 e$role))
      }, aar)
  }
  if (length(author)) {
    has_authors_at_R_field <- TRUE
  }
  else {
    has_authors_at_R_field <- FALSE
    author <- as.person(meta$Author)
  }
  z <- list(title = paste0(package, ": ", meta$Title), author = author, 
            year = year, note = paste("R package version", meta$Version))
  if (identical(meta$Repository, "CRAN")) 
    z$url <- sprintf("https://CRAN.R-project.org/package=%s", 
                     package)
  if (identical(meta$Repository, "R-Forge")) {
    z$url <- if (!is.null(rfp <- meta$"Repository/R-Forge/Project")) 
      sprintf("https://R-Forge.R-project.org/projects/%s/", 
              rfp)
    else "https://R-Forge.R-project.org/"
    if (!is.null(rfr <- meta$"Repository/R-Forge/Revision")) 
      z$note <- paste(z$note, rfr, sep = "/r")
  }
  if ((is.null(meta$Repository) || identical(meta$Repository, 
                                             "Bioconductor")) && !is.null(meta$git_url) && startsWith(meta$git_url, 
                                                                                                      "https://git.bioconductor.org/packages")) {
    z$url <- sprintf("https://bioconductor.org/packages/%s", 
                     package)
    z$doi <- sprintf("10.18129/B9.bioc.%s", package)
  }
  
  meta$URL <- NULL
  if (!length(z$url) && !is.null(url <- meta$URL)) {
    if (grepl("[, ]", url)) 
      z$note <- url
    else z$url <- url
  }
  
  header <- if (!auto_was_meta) {
    gettextf("To cite package %s in publications use:", sQuote(package))
  }
  else NULL
  footer <- if (!has_authors_at_R_field && !auto_was_meta) {
    gettextf("ATTENTION: This myCitation information has been auto-generated from the package DESCRIPTION file and may need manual editing, see %s.", 
             sQuote("help(\"myCitation\")"))
  }
  else NULL
  author <- format(z$author, include = c("given", "family"))
  if (length(author) > 1L) 
    author <- paste(paste(head(author, -1L), collapse = ", "), 
                    tail(author, 1L), sep = " and ")
  z$url <- NULL
  
  rval <- bibentry(bibtype = "Manual", header = header, footer = footer, 
                   other = z)
  utils:::.citation(rval, package)
}


myReadCitationFile <- function (file, meta = NULL) 
{
  meta <- as.list(meta)
  exprs <- tools:::.parse_CITATION_file(file, meta$Encoding)
  if(length(exprs)>0)exprs[[length(exprs)]]$url <- NULL
  if(length(exprs)>0)exprs[[length(exprs)]]$eprint <- NULL
  #exprs[[2]] <- as.call(exprs[[2]])
   rval <- list()
  mheader <- NULL
  mfooter <- NULL
  envir <- new.env(hash = TRUE)
  assign("meta", meta, envir = envir)
  for (expr in exprs) {
    x <- eval(expr, envir = envir)
    if (inherits(x, "bibentry")) 
      rval <- c(rval, list(x))
  }
  rlen <- length(rval)
  if (rlen == 1L) 
    rval <- rval[[1L]]
  else if (rlen > 1L) 
    rval <- do.call(c, rval)
  utils:::.citation(rval, meta$Package)
}


```

```{=html}
<style>
citation {
  font-size: 9pt;
}
</style>
```

### MoleculeExperiment

<a href="https://sydneybiox.github.io/MoleculeExperiment/"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/MoleculeExperiment/MoleculeExperiment.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("MoleculeExperiment", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("MoleculeExperiment"), style = "html")
```

</font>

### simpleSeg

<a href="http://www.bioconductor.org/packages/release/bioc/html/simpleSeg.html"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/simpleSeg/SimpleSeg_Hex_standard.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("simpleSeg", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("simpleSeg"), style = "html")
```

</font>

### scMerge

<a href="https://sydneybiox.github.io/scMerge/"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/scMerge/scMerge.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("scMerge", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("scMerge"), style = "html")
```

</font>

### FuseSOM

<a href="http://www.bioconductor.org/packages/release/bioc/html/FuseSOM.html"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/FuseSOM/fuseSOM_ai_standard.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("FuseSOM", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("FuseSOM"), style = "html")
```

</font>

### treekoR

<a href="http://www.bioconductor.org/packages/release/bioc/html/treekoR.html"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/treekoR/treekoR.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("treekoR", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("treekoR"), style = "html", url = "")
```

</font>

### scFeatures

<a href="http://www.bioconductor.org/packages/release/bioc/html/scFeatures.html"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/scFeatures/sticker_version2.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("scFeatures", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("scFeatures"), style = "html")
```

</font>

### scHOT

<a href="https://bioconductor.org/packages/release/bioc/html/scHOT.html"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/scHOT/scHOT_hex.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("scHOT", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("scHOT"), style = "html")
```

</font>

### spicyR

<a href="https://ellispatrick.github.io/spicyR/"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/spicyR/spicyR_standard.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("spicyR", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("spicyR"), style = "html")
```

</font>

### Statial

<a href="https://sydneybiox.github.io/Statial/"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/Statial/statial.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("Statial", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("Statial"), style = "html")
```

</font>

### lisaClust

<a href="https://ellispatrick.github.io/lisaClust/"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/lisaClust/lisaClust_sticker_ai_standard.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("lisaClust", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("lisaClust"), style = "html")
```

</font>

### ClassifyR

<a href="https://sydneybiox.github.io/ClassifyR/"><img src="https://github.com/SydneyBioX/SydneyBioXStickers/blob/main/ClassifyR/classifyR.png?raw=true" align="right" style="height: 100px; border: 0px"/></a>

```{r, results = 'asis', echo = FALSE}
cat(gsub("\n", " ", utils::packageDescription("ClassifyR", fields = "Description")))
```

<font size=-1>

```{r, results = 'asis', echo = FALSE}
print(myCitation("ClassifyR"), style = "html")
```

</font>

This guide presents a comprehensive workflow for analysing spatial omics data, featuring examples sorted by different technologies as described below. The workflow covers cell segmentation, data normalisation, various tests of proportion and spatial localisation, microenvironment estimation and patient prediction. We encourage focusing on the biological questions these methods can address rather than the specific technologies used.

```{=html}
<style>
table {
  font-size: 9pt;
  padding: 1px;
}
</style>
```

| Disease | Technology | Title | Segmentation | Alignment | Clustering | Localisation | Microenvironments | Patient Classification |   |
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
| Breast cancer | MIBI-TOF | Keren_2018 |  |  |  | X | X | X |  |
| Breast cancer | MIBI-TOF | Risom_2022 | X | X | X | X | X | X |  |
| Mouse organogenesis | seqFISH | Lohoff_2022 |  | X |  | X |  |  |  |

```{=html}
<style>
citation {
  font-size: 9pt;
  font-style: italic;
}
</style>
```

## Datasets

Through the course of this spicyWorkBook, we will take advantage of several different spatial datasets that are publicly available. These datasets are all accessible within our [SpatialDatasets](https://www.bioconductor.org/packages/release/data/experiment/html/SpatialDatasets.html) package on bioconductor. We will demonstrate several questions that could be answered or explored for each of these datasets using the available information.

### Spatial Proteomics - MIBITOF

MIBI-TOF (multiplexed ion beam imaging by time of flight) is an instrument that uses bright ion sources and orthogonal time-of-flight mass spectrometry to image metal-tagged antibodies at subcellular resolution in clinical tissue sections. It is capable of imaging approximately 40 labelled antibodies and image fields of about $1mm^2$ at resolutions down to $260nm$.

#### [Triple Negative Breast Cancer - Keren_2018](datasets/Keren_2018/Keren_2018.qmd)

This study profiles 36 proteins in tissue samples from 41 patients with triple-negative breast cancer using MIBI-TOF. We will use this dataset to demonstrate the functionality of our [Statial](https://www.bioconductor.org/packages/release/bioc/html/Statial.html) package, which allows us to identify changes in cell state that are related to the spatial localisation of cells.

<citation> Keren et al. (2018). A Structured Tumor-Immune Microenvironment in Triple Negative Breast Cancer Revealed by Multiplexed Ion Beam Imaging. Cell, 174(6), 1373-1387.e1319. ([DOI](https://doi.org/10.1016/j.cell.2018.08.039)) </citation>

#### Ductal carcinoma in situ - Risom_2022

This study uses MIBI-TOF to profile the spatial landscape of ductal carcinoma in situ (DCIS), a pre-invasive lesion believed to be a precursor to invasive breast cancer (IBC). A key conclusion of the manuscript is that spatial information about cells can be leveraged to predict disease progression in patients. We use the workflow described in this guide to reach a similar conclusion.

<citation> Risom et al. (2022). Transition to invasive breast cancer is associated with progressive changes in the structure and composition of tumor stroma. Cell, 185(2), 299-310.e18 ([DOI](https://doi.org/10.1016/j.cell.2021.12.023)) </citation>

### Spatial Proteomics - CODEX

CODEX (Co-detection by indexing) is a highly multiplexed tissue imaging technique that uses DNA-barcoded antibodies which are later revealed by fluorescent detector oligonucleotides. It can visualise up to 60 labelled antibodies at subcellular resolution.

#### Colorectal cancer - Schurch_2020

A CODEX dataset which aimed to characterise the immune tumour microenvironment in advanced-stage colorectal cancer. The dataset consists of 35 advanced colorectal cancer patients, with 4 images per patient for a total of 140 images. Each image is marked with a 56-antibody panel to characterise a total of 24 distinct tumour and immune cell populations. Overall, the dataset contains 240,000 cells along with clinical information including patient tumour grade, tumour type, and patient survival.

<citation> Schürch et al. (2020). Coordinated Cellular Neighborhoods Orchestrate Antitumoral Immunity at the Colorectal Cancer Invasive Front et al. (2018). A Coordinated Cellular Neighborhoods Orchestrate Antitumoral Immunity at the Colorectal Cancer Invasive Front. Cell, 182(5), 1341-1359.e19. ([DOI](https://doi.org/10.1016/j.cell.2020.07.005)) </citation>

### Spatial Proteomics - IMC

IMC (Imaging Mass Cytometry) is an instrument that combines laser ablation with mass cytometry to image metal-tagged antibodies at subcellular resolution in clinical tissue sections. The datasets produced by IMC can image approximately 30–40 labeled antibodies, covering tissue areas of around $1mm^2$ with a resolution down to $1 \mu m$.

#### Breast cancer - Ali_2020

Also known as the METABRIC dataset, this 37-panel IMC dataset contains images of 456 primary invasive breast carcinoma patients obtained from 548 samples. Clinical variables in the dataset include age, chemotherapy (CT), radiotherapy (RT), hormone treatment (HT) indicators, estrogen receptor (ER) status, and gene expression markers (MKI67, EGFR, PGR, and ERBB2).

<citation> Ali et al. (2020). Imaging mass cytometry and multiplatform genomics define the phenogenomic landscape of breast cancer. Nature Cancer, 1, 163-175. ([DOI](https://doi.org/10.1038/s43018-020-0026-6))</citation>

#### Head and neck squamous cell carcinoma - Ferguson_2020

This study uses IMC to map the immune landscape and identify differences between high-risk primary head and neck cancer (HNcSCC) tumors that did not progress and those that developed metastases (progressing tumours). The key conclusion of this manuscript (amongst others) is that spatial information about cells and the immune environment can be used to predict primary tumour progression or metastases in patients. We will use our spicyWorkflow to reach a similar conclusion.

<citation> Ferguson et al. (2022). High-Dimensional and Spatial Analysis Reveals Immune Landscape–Dependent Progression in Cutaneous Squamous Cell Carcinoma. Clinical Cancer Research, 28(21), 4677-4688. ([DOI](https://doi.org/10.1158/1078-0432.CCR-22-1332))</citation>

### Spatial Transcriptomics - seqFISH

[SeqFISH](https://spatial.caltech.edu/seqfish) (sequential Fluorescence In Situ Hybridization) is a technology that enables the identification of thousands of molecules like RNA, DNA, and proteins directly in single cells with their spatial context preserved. seqFISH can multiplex over 10,000 molecules and integrate multiple modalities.

#### [Mouse organogenesis - Lohoff_2022](datasets/Lohoff_2022/Lohoff_2022.qmd)

This study uses seqFISH to spatially profile the expression of 387 genes in mouse embryos. A comprehensive spatially resolved map of gene expression was created by integrating the seqFISH data with existing scRNAseq data. This integration facilitated the exploration of cellular relationships across different regions of the embryo.

<citation> Lohoff et al. (2022). Integration of spatial and single-cell transcriptomic data elucidates mouse organogenesis. Nature Biotechnology 40, 74--85 ([DOI](https://doi.org/10.1038/s41587-021-01006-2)). </citation>
