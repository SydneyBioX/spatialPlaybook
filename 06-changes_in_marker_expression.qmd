# Changes in marker expression

```{r 06-code chunk timing, include = FALSE}
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "secs")
      # return a character string to show the time in bold and right-aligned, with extra spacing
      paste("<div style='text-align: right;'><em>Time for this code chunk to run with ", nCores, "cores: ", round(res, 2), "s</div></em>")
    }
  }
}))
```

Sometimes, cells that appear similar based on marker expression alone can behave very differently depending on their surroundings. Subtle shifts in marker levels—too faint or variable to be captured through clustering—may hold important clues about a cell's functional state. For example, immune cells may only become activated when positioned near tumour or infected cells, and these changes may not be detectable when cells are analysed in isolation. Technical noise and overlapping expression patterns further complicate efforts to distinguish such nuanced subpopulations using conventional approaches.

In these cases, spatial context becomes a critical lens. By analysing how marker expression varies in relation to a cell’s neighbourhood—such as its proximity to other cell types or tissue structures—we can uncover functional diversity that would otherwise remain hidden. This spatial perspective reveals how cells adapt to their microenvironment, transition between states, or participate in local interactions, offering a richer understanding of tissue dynamics and disease mechanisms.

The `SpatioMark` method, implemented in the `Statial` package, is designed for exactly this purpose. It detects markers whose expression levels change within a given cell type depending on their spatial context—highlighting activation, suppression, or other state changes that are missed by standard clustering.

```{r 06-load libraries, echo=FALSE, results="hide", warning=FALSE}
suppressPackageStartupMessages({
  library(Statial)
  library(spicyR)
  library(ClassifyR)
  library(lisaClust)
  library(dplyr)
  library(SingleCellExperiment)
  library(ggplot2)
  library(ggsurvfit)
  library(survival)
  library(tibble)
  library(treekoR)
})
```

```{r 06-libraries, eval = FALSE}
library(Statial)
library(spicyR)
library(ClassifyR)
library(lisaClust)
library(dplyr)
library(SingleCellExperiment)
library(ggplot2)
library(ggsurvfit)
library(survival)
library(tibble)
library(treekoR)
```

```{r 06-set parameters}
# set parameters
set.seed(51773)

# whether to use multiple cores (recommended)
use_mc = TRUE
is_windows = .Platform$OS.type == "windows"

if (use_mc) {
  nCores = max(ceiling(parallel::detectCores() / 2), 1)
  
  if (nCores == 1) {
    BPPARAM = BiocParallel::SerialParam()
  } else if (is_windows) {
    BPPARAM = BiocParallel::SnowParam(workers = nCores, type = "SOCK")
  } else {
    BPPARAM = BiocParallel::MulticoreParam(workers = nCores)
  }
} else {
  BPPARAM = BiocParallel::SerialParam()
}

theme_set(theme_classic())
```

## Statial: Marker means

Before diving into spatially contextualised marker changes with `SpatioMark`, it's useful to understand how more conventional marker expression summaries—like marker means—can still offer valuable insight, especially when stratified by spatial features. A marker mean provides a simple but effective way to quantify expression: we calculate the average intensity of a marker across a set of cells, and then compare these averages across experimental conditions. While this can be done at the whole-image level, much more meaningful biological comparisons emerge when we stratify by cell type, spatial domain, or both.

For example, if you're interested in understanding how CD163 expression changes in infiltrating macrophages located specifically within tumour regions across treatment groups, you would focus on the marker mean for macrophages confined to that domain. This allows you to ask precise questions about functional changes in well-defined spatial and cellular contexts.

For this demonstration, we will use the [Keren 2018](datasets.qmd) dataset.

```{r 06-load keren data, message=FALSE, warning=FALSE, time_it = TRUE}
kerenSPE <- SpatialDatasets::spe_Keren_2018()

# Removing patients without survival data.
kerenSPE <- kerenSPE[,!is.na(kerenSPE$`Survival_days_capped*`)]

# identify spatial domains with lisaClust
kerenSPE <- lisaClust(kerenSPE,
                      k = 5,
                      BPPARAM = BPPARAM)
```

```{r 06-prep survival vector}
kerenSPE$event = 1 - kerenSPE$Censored
kerenSPE$survival = Surv(kerenSPE$`Survival_days_capped*`, kerenSPE$event)
# Extracting survival data
survData <- kerenSPE |>
  colData() |>
  data.frame() |>
  select(imageID, survival) |>
  unique()

kerenSPE$survival <- NULL

# Creating survival vector
kerenSurv <- survData$survival
names(kerenSurv) <- survData$imageID

kerenSurv <- kerenSurv[!is.na(kerenSurv)]
```

Our `Statial` package provides functionality to identify the average marker expression of a given cell type in a given region, using the `getMarkerMeans` function. Similar to `spicyR` and `lisaClust`, these features can also be used for survival analysis.

```{r 06-marker means in region}
cellTypeRegionMeans <- getMarkerMeans(kerenSPE,
  imageID = "imageID",
  cellType = "cellType",
  region = "region")

cellTypeRegionMeans[1:3, 1:3]
```

The output is a dataframe containing the average expression of each marker in each cell type in each region. The column names are formatted as: `marker__cell_type__region`.

We can use the `colTest` function from spicyR to check whether average marker expression in each cell type in each region is associated with survival probability. `colTest` requires three arguments: i) `df` specifies the dataframe containing marker means, ii) `condition` specifies the outcome of interest, and iii) `type` specifies the type of test to perform (wilcox, t-test, or survival). In the code below, we've specified `condition` to be our `Surv` vector and `type = survival` indicates we are performing survival analysis.

```{r 06-colTest for survival}
survivalResults <- colTest(df = cellTypeRegionMeans[names(kerenSurv), ], 
                           condition = kerenSurv, 
                           type = "survival")

head(survivalResults)
```

Our most significant relationship appears to be `B7H3__CD4_T_cell__region_1`, which represents the average expression of the B7H3 marker in CD4 T cells in region 1. The positive coefficient associated with this relationship indicates that higher expression of B7H3 in CD4 T cells in this region is associated with poorer survival outcomes for patients.

We can examine this relationship in more detail by plotting a Kaplan-Meier curve.

```{r 06-KM curve for region, fig.width=5, fig.height=4}
# Selecting the most significant relationship
survRelationship <- cellTypeRegionMeans[["B7H3__CD4_T_cell__region_1"]]
survRelationship <- ifelse(survRelationship > median(survRelationship), "Higher expression", "Lower expression")

# Plotting Kaplan-Meier curve
survfit2(kerenSurv ~ survRelationship) |>
  ggsurvfit() +
  add_pvalue() +
  ggtitle("B7H3__CD4_T_cell__region_1")
```

We can also look at cell types alone, without separating by region. To do this, we simply do not specify `region`.

```{r 06-marker means in celltype}
cellTypeMeans <- getMarkerMeans(kerenSPE,
  imageID = "imageID",
  cellType = "cellType")

survivalResults <- colTest(cellTypeMeans[names(kerenSurv), ], kerenSurv, type = "survival")

head(survivalResults)
```

```{r 06-KM curve for celltype, fig.width=5, fig.height=4}
# Selecting the most significant relationship
survRelationship <- cellTypeMeans[["CD56__Tregs"]]
survRelationship <- ifelse(survRelationship > median(survRelationship), "Higher expression", "Lower expression")

# Plotting Kaplan-Meier curve
survfit2(kerenSurv ~ survRelationship) |>
  ggsurvfit() +
  add_pvalue() +
  ggtitle("CD56__Tregs")
```

The coefficient associated with `CD56__Tregs` is positive, which indicates that higher expression is associated with poorer survival outcomes for patients, and this is also reflected in the KM curve.

## SpatioMark: Identifying continuous changes in cell state

Marker means summarised per cell type or per spatial region can offer valuable insights into how expression levels vary across conditions or anatomical compartments. However, these summaries treat cells as independent units and often miss finer-grained, dynamic patterns that arise from cell-cell interactions.

This is where `SpatioMark` becomes particularly powerful. Instead of averaging across broad groups, `SpatioMark` captures how marker expression in a given cell type changes in a continuous fashion based on proximity to other cell types. This allows us to detect context-dependent expression shifts—revealing, for instance, how the presence of neighbouring immune or tumour cells can influence a cell’s functional state. By focusing on these spatial gradients in marker expression, SpatioMark provides a framework for understanding how local microenvironments modulate cell behaviour in situ.

<img src="images/spatiomark_fig1.jpg" align="center" style="height: 300px; border: 0px"/>

### Continuous cell state changes within a single image

The first step in analysing these changes is to calculate the spatial proximity and abundance of each cell to every cell type. `getDistances` calculates the Euclidean distance from each cell to the nearest cell of each cell type. `getAbundances` calculates the K-function value for each cell with respect to each cell type. Both metrics are stored in the `reducedDims` slot of the `SpatialExperiment` object.

<!--fix spatial coordinates, assign spatial coords to spatial coords slot-->

```{r 06-abundance and distance metrics}
# assign spatial coordinates
kerenSPE$x = spatialCoords(kerenSPE)[, 1]
kerenSPE$y = spatialCoords(kerenSPE)[, 2]

# calculate distances for a maximum distance of 200
kerenSPE <- getDistances(kerenSPE,
  maxDist = 200)

# calculate K-function for a radius of 200
kerenSPE <- getAbundances(kerenSPE,
  r = 200,
  nCores = nCores)

reducedDims(kerenSPE)
```

First, let's examine the same effect observed earlier with `Kontextual` - the localisation between p53+ keratin/tumour cells and macrophages in the context of total keratin/tumour cells for image 6 of the Keren 2018 dataset.

Statial provides two main functions to assess this relationship - `calcStateChanges` and `plotStateChanges`. We can use `calcStateChanges` to examine the relationship between two cell types for one marker in a specific image. In this case, we're examining the relationship between keratin/tumour cells (`from = Keratin_Tumour`) and macrophages (`to = "Macrophages"`) for the marker p53 (`marker = "p53"`) in `image = "6"`. We can appreciate that the `fdr` statistic for this relationship is significant, with a negative t-value, indicating that the expression of p53 in keratin/tumour cells decreases as distance from macrophages increases.

```{r 06-calcStateChanges}
stateChanges <- calcStateChanges(
  cells = kerenSPE,
  type = "distances",
  image = "6",
  from = "Keratin_Tumour",
  to = "Macrophages",
  marker = "p53",
  nCores = nCores)

stateChanges
```

Statial also provides a convenient function for visualising this interaction - `plotStateChanges`. Here, again we can specify `image = 6` and our main cell types of interest, keratin/tumour cells and macrophages, and our marker p53, in the same format as `calcStateChanges`.

Through this analysis, we can observe that keratin/tumour cells closer to a group of macrophages tend to have higher expression of p53, as observed in the first graph. This relationship is quantified with the second graph, showing an overall decrease of p53 expression in keratin/tumour cells as distance from macrophages increases.

These results allow us to essentially arrive at the same result as Kontextual, which calculated a localisation between p53+ keratin/tumour cells and macrophages in the wider context of keratin/tumour cells.

```{r 06-plotStateChanges, warning = FALSE, message = FALSE}
p <- plotStateChanges(
  cells = kerenSPE,
  type = "distances",
  image = "6",
  from = "Keratin_Tumour",
  to = "Macrophages",
  marker = "p53",
  size = 1,
  shape = 19,
  interactive = FALSE,
  plotModelFit = FALSE,
  method = "lm")

# plot the image
p$image
```

```{r 06-scatterplot, warning = FALSE, message = FALSE}
# plot the scatter plot
p$scatter
```

### Continuous cell state changes across all images

Beyond looking at single cell-to-cell interactions for a single image, we can also look at all interactions across all images. The `calcStateChanges` function provided by Statial can be expanded for this exact purpose - by not specifying cell types, a marker, or an image, `calcStateChanges` will examine the most significant correlations between distance and marker expression across the entire dataset. Here, we've filtered out the most significant interactions to only include those found within image 6 of the Keren 2018 dataset.

```{r time_it = TRUE}
stateChanges <- calcStateChanges(
  cells = kerenSPE,
  type = "distances",
  nCores = nCores,
  minCells = 100
)

stateChanges |>
  filter(imageID == 6) |>
  head(n = 10)
```

In image 6, the majority of the top 10 most significant interactions occur between keratin/tumour cells and an immune population, and many of these interactions appear to involve the HLA class I ligand.

We can examine some of these interactions further with the `plotStateChanges` function.

```{r 06-plotStateChanges HLA}
p <- plotStateChanges(
  cells = kerenSPE,
  type = "distances",
  image = "6",
  from = "Keratin_Tumour",
  to = "Macrophages",
  marker = "HLA_Class_1",
  size = 1,
  shape = 19,
  interactive = FALSE,
  plotModelFit = FALSE,
  method = "lm"
)

# plot the image
p$image
```

```{r 06-scatter plot HLA, warning = FALSE, message = FALSE}
# plot the scatter plot
p$scatter
```

The plot above shows us a clear visual correlation - as the distance from macrophages decreases, keratin/tumour cells increase their expression HLA class I. Biologically, HLA Class I molecules are ligands present on all nucleated cells, responsible for presenting internal cell antigens to the immune system. Their role is to mark abnormal cells for destruction by CD8+ T cells or NK cells, facilitating immune surveillance and response.

Next, let's take a look at the top 10 most significant results across all images.

```{r 06-stateChanges all images}
stateChanges |> head(n = 10)
```

Immediately, we can appreciate that a couple of these interactions are not biologically plausible. One of the most significant interactions occurs between B cells and CD4 T cells in image 35, where CD4 T cells are found to increase CD20 expression when in close proximity to B cells. Biologically, CD20 is a highly specific marker for B cells, and under healthy circumstances are usually not expressed in T cells.

Could this potentially be an artefact of `calcStateChanges`? We can examine the image through the `plotStateChanges` function, where we indeed observe a strong increase in CD20 expression in T cells nearby B cell populations.

```{r 06-plotStateChanges CD20}
p <- plotStateChanges(
  cells = kerenSPE,
  type = "distances",
  image = "35",
  from = "CD4_T_cell",
  to = "B_cell",
  marker = "CD20",
  size = 1,
  shape = 19,
  interactive = FALSE,
  plotModelFit = FALSE,
  method = "lm")

# plot the image
p$image
```

```{r 06-scatter plot CD20}
# plot the scatter plot
p$scatter
```

So why are T cells expressing CD20? This brings us to a key problem of cell segmentation - contamination.

### Contamination (Lateral marker spill over)

Contamination, or lateral marker spill over, is an issue that results in a cell’s marker expressions being wrongly attributed to another adjacent cell. This issue arises from incorrect segmentation where components of one cell are wrongly determined as belonging to another cell. Alternatively, this issue can arise when antibodies used to tag and measure marker expressions don't latch on properly to a cell of interest, thereby resulting in residual markers being wrongly assigned as belonging to a cell near the intended target cell. It is important that we either correct or account for this incorrect attribution of markers in our modelling process. This is critical in understanding whether significant cell-cell interactions detected are an artefact of technical measurement errors driven by spill over or are real biological changes that represent a shift in a cell’s state.

To circumvent this problem, Statial provides a function that predicts the probability that a cell is any particular cell type - `calcContamination`. `calcContamination` returns a dataframe of probabilities demarcating the chance of a cell being any particular cell type. This dataframe is stored under `contaminations` in the `reducedDim` slot of the `SingleCellExperiment` object. It also provides the `rfMainCellProb` column, which provides the probability that a cell is indeed the cell type it has been designated. For example, for a cell designated as CD8, `rfMainCellProb` could give a 80% chance that the cell is indeed CD8, due to contamination.

We can then introduce these probabilities as covariates into our linear model by setting `contamination = TRUE` as a parameter in our `calcStateChanges` function.

```{r 06-calcContiamination}
kerenSPE <- calcContamination(kerenSPE)

stateChangesCorrected <- calcStateChanges(
  cells = kerenSPE,
  type = "distances",
  nCores = 1,
  minCells = 100,
  contamination = TRUE
)

stateChangesCorrected |> head(n = 10)
```

However, this is not a perfect solution for the issue of contamination. As we can see, despite factoring in contamination into our linear model, the correlation between B cell density and CD20 expression in CD4 T cells remains one of the most significant interactions in our model.

However, this does not mean factoring in contamination into our linear model was ineffective.

Whilst our correction attempts do not rectify every relationship which arises due to contamination, we show that a significant portion of these relationships are rectified. We can show this by plotting a ROC curve of true positives against false positives. In general, cell type specific markers such as CD4 (specific to T helper cells), CD8 (specific to cytotoxic T cells), and CD20 should not change in cells they are not specific to. Therefore, relationships detected to be significant involving these cell type markers are likely false positives and will be treated as such for the purposes of evaluation. Meanwhile, cell state markers are predominantly likely to be true positives.

Plotting the relationship between false positives and true positives, we'd expect the contamination correction to be greatest in the relationships with the top 100 lowest p values, where we indeed see more true positives than false positives with contamination correction.

```{r 06-ROC curve}
cellTypeMarkers <- c("CD3", "CD4", "CD8", "CD56", "CD11c", "CD68", "CD45", "CD20")

values <- c("blue", "red")
names(values) <- c("None", "Corrected")

df <- rbind(
  data.frame(TP = cumsum(stateChanges$marker %in% cellTypeMarkers), 
             FP = cumsum(!stateChanges$marker %in% cellTypeMarkers), type = "None"),
  data.frame(TP = cumsum(stateChangesCorrected$marker %in% cellTypeMarkers), 
             FP = cumsum(!stateChangesCorrected$marker %in% cellTypeMarkers), type = "Corrected"))

ggplot(df, aes(x = TP, y = FP, colour = type)) +
  geom_line() +
  labs(y = "Cell state marker (FP)", x = "Cell type marker (TP)") +
  scale_colour_manual(values = values)
```

Below, we zoom in on the ROC curve where the top 100 lowest p values occur, where we indeed see more true positives than false positives with contamination correction.

```{r 06-top 100 ROC, warning = FALSE, message = FALSE}
ggplot(df, aes(x = TP, y = FP, colour = type)) +
  geom_line() +
  xlim(0, 100) +
  ylim(0, 1000) +
  labs(y = "Cell state marker (FP)", x = "Cell type marker (TP)") +
  scale_colour_manual(values = values)
```

### Associate continuous state changes with survival outcomes

Similiar to `Kontextual`, we can run a similar survival analysis using our `SpatioMark` results. Here, `prepMatrix` extracts the coefficients, or the `coef` column of `stateChanges` by default. To use the t-values instead, specify `column = "tval"` in the `prepMatrix` function. As before, we use `colTest` to build the CoxPH model.

```{r 06-survival with stateChanges, time_it = TRUE}
# Preparing features for Statial
stateMat <- prepMatrix(stateChanges)

# Ensuring rownames of stateMat match up with rownames of the survival vector
stateMat <- stateMat[names(kerenSurv), ]

# Remove some very small values
stateMat <- stateMat[, colMeans(abs(stateMat) > 0.0001) > .8]

survivalResults <- colTest(stateMat, kerenSurv, type = "survival")

head(survivalResults)
```

`Keratin_Tumour__Mono_or_Neu__Pan.Keratin` is the most significant pairwise relationship which contributes to patient survival. That is, the relationship between pan-keratin expression in keratin/tumour cells and their spatial proximity to monocytes/neutrophils. The negative coefficient associated with this relationship tells us that higher pan-keratin expression in keratin/tumour cells nearby monocyte/neutrophil cell populations leads to better survival outcomes for patients.

```{r 06-Km curve with stateChanges, fig.width=5, fig.height=4}
# Selecting the most significant relationship
survRelationship <- stateMat[["Keratin_Tumour__Mono_or_Neu__Pan.Keratin"]]
survRelationship <- ifelse(survRelationship > median(survRelationship), "Higher expression in close cells", "Lower expression in close cells")

# Plotting Kaplan-Meier curve
survfit2(kerenSurv ~ survRelationship) |>
  ggsurvfit() +
  add_pvalue() +
  ggtitle("Keratin_Tumour__Mono_or_Neu__Pan.Keratin")
```

<!--## scFeatures: Moran's I-->

We conclude the section on spatial quantification metrics here. So far, we have identified 7 metrics to quantify spatial relationships -

1.  Cell type proportions (FuseSOM)
2.  Co-localisation between pairs of cell types using the L-function (spicyR)
3.  Cell type co-localisation with respect to a parent population using `Kontextual` (Statial)
4.  Regions of co-localisation, or spatial domains (lisaClust)
5.  Marker means in each cell type (Statial)
6.  Marker means in each cell type in each region (Statial)
7.  Proximity-associated changes in marker expression using SpatioMark (Statial)

## sessionInfo

```{r}
sessionInfo()
```
