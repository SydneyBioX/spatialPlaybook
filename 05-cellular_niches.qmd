# Identifying spatial domains with unsupervised clustering

```{r 05-code chunk timing, include = FALSE}
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "secs")
      # return a character string to show the time in bold and right-aligned, with extra spacing
      paste("<div style='text-align: right;'><em>Time for this code chunk to run with ", nCores, "cores: ", round(res, 2), "s</div></em>")
    }
  }
}))
```

Beyond pairwise spatial relationships between cell types, imaging datasets reveal richer layers of tissue organisation through concepts like niches, neighborhoods, microenvironments, and spatial domains. Niches typically describe the immediate surroundings of a specific cell, while spatial domains represent larger tissue compartments formed by coordinated cell arrangements. These frameworks help us understand how tissue architecture varies across conditions or patient groups.

The interpretation of spatial domains is highly context-dependent. In cancer research, domain analysis might highlight the distribution of tumor and immune compartments or reveal how domain composition correlates with disease progression. In metabolic diseases like diabetes, domains such as pancreatic islets serve as key regions for studying changes in marker expression or immune infiltration.

<img src="images/IMC_colon.png" align="right" style="height: 200px; border: 0px"/>

One effective approach to identify spatial domains involves clustering cells based on their local spatial association patterns, as implemented in the `lisaClust` package. This method groups tissue regions with similar spatial signatures, uncovering emergent domains within complex tissue landscapes. Selecting the appropriate number of clusters and interpreting them based on cell type composition and density remains a key challenge. While statistical metrics like the Gap statistic or Silhouette score can help guide cluster selection, biological insight is crucial to distinguish meaningful structural patterns from noise.

In this section, we demonstrate how to use `lisaClust` to identify spatial domains and examine their relevance to clinical outcomes.

```{r 05-load libraries, echo=FALSE, results="hide", warning=FALSE}
suppressPackageStartupMessages({
  library(lisaClust)
  library(spicyR)
  library(ggplot2)
  library(SingleCellExperiment)
  library(SpatialDatasets)
})
```

```{r 05-libraries, eval = FALSE}
library(lisaClust)
library(spicyR)
library(ggplot2)
library(SingleCellExperiment)
library(SpatialDatasets)
```

```{r 05-set parameters}
# set parameters
set.seed(51773)

# whether to use multiple cores (recommended)
use_mc = TRUE
is_windows = .Platform$OS.type == "windows"

if (use_mc) {
  nCores = max(ceiling(parallel::detectCores() / 2), 1)
  
  if (nCores == 1) {
    BPPARAM = SerialParam()
  } else if (is_windows) {
    BPPARAM = SnowParam(workers = nCores, type = "SOCK")
  } else {
    BPPARAM = MulticoreParam(workers = nCores)
  }
} else {
  BPPARAM = SerialParam()
}

theme_set(theme_classic())
```

## lisaClust

`lisaClust` is a method developed to identify and characterize tissue microenvironments from highly multiplexed imaging data by analyzing how different types of cells are arranged in space. It starts by treating each cell as a point on a 2D map, with each point labeled by its cell type. For every individual cell, lisaClust calculates how strongly it is surrounded by other specific cell types—more or less than would be expected by chance—using spatial statistics called the K-function or L-function. These calculations, called local indicators of spatial association (LISAs), capture detailed information about local cell–cell interactions across the tissue.

<img src="images/lisaClust_fig1.jpg" align="center" style="height: 300px; border: 0px"/>

`lisaClust` then uses these cell-level spatial profiles to group cells into clusters using standard clustering algorithms like k-means. Each cluster represents a tissue region, or microenvironment, where certain combinations of cell types tend to co-occur in space. This approach allows researchers to move beyond simple pairwise analyses and uncover more complex patterns of organization, like immune niches or tumour–stroma boundaries, that reflect how cells interact within the broader tissue context.

### Case study: Keren

We will start by reading in the [Keren 2018](datasets.qmd) dataset from the `SpatialDatasets` package as a `SingleCellExperiment` object. Here the data is in a format consistent with that outputted by CellProfiler.

```{r 05-load keren data}
kerenSPE <- SpatialDatasets::spe_Keren_2018()
```

#### Generate LISA curves

For the purpose of this demonstration, we will be using only images 5 and 6 of the dataset.

```{r 05-filter keren dataset}
kerenSPE <- kerenSPE[,kerenSPE$imageID %in% c("5", "6")]
```

This data comes with pre-annotated cell types, so we can move directly to performing k-means clustering on the local indicators of spatial association (LISA) functions using the `lisaClust` function. The image ID, cell type column, and spatial coordinates can be specified using the `imageID`, `cellType`, and `spatialCoords` arguments respectively. We will identify 5 regions of co-localisation by setting `k = 5`.

```{r 05-lisaClust, message = FALSE, warning = FALSE}
kerenSPE <- lisaClust(kerenSPE,
                      k = 5)
```

These regions are stored in `colData` and can be extracted.

```{r 05-extract regions}
colData(kerenSPE)[, c("imageID", "region")] |>
  head(10)
```

#### Examine cell type enrichment

`lisaClust` also provides a convenient function, `regionMap`, for examining which cell types are located in which regions. In this example, we use this to check which cell types appear more frequently in each region than expected by chance.

```{r 05-regionMap}
regionMap(kerenSPE,
  type = "bubble")
```

Above, we can see that tumour cells are concentrated in region 5, and immune cells are concentrated in region 1 and 4. We can further segregate these cells by increasing the number of clusters, i.e., increasing the parameter `k =` in the `lisaClust` function.

In addition to choosing an appropriate number of clusters, it is equally important to select a biologically meaningful radius over which spatial associations are calculated. The radius determines the scale at which local neighbourhoods are defined—essentially setting the window for detecting co-localisation patterns. A small radius focuses on immediate cellular environments and short-range interactions, making it ideal for identifying tightly organised niches or direct cell–cell contact. In contrast, a larger radius captures broader patterns, such as tissue compartmentalisation or gradient-based organisation. The optimal radius should reflect the biological scale of interest, such as known signalling distances or histological structures, and it can be helpful to explore multiple values to understand how spatial organisation changes across scales.

::: {.callout-tip title="Choosing the number of spatial domains"}
**How do we choose an appropriate value for `k`?**

-   The choice of `k` depends largely on the biological question being asked. For instance, if we are interested in understanding the interactions between immune cells in a tumor microenvironment, the number of clusters should reflect the known biological subtypes of immune cells, such as T cells, B cells, macrophages, etc. In this case, a larger value of `k` may be needed to capture the diversity within these immune cell populations.

-   On the other hand, if the focus is on interactions between immune cells and tumor cells, we might choose a smaller value of `k` to group immune cells into broader categories.

-   Additionally, methods like the Gap statistic, Jump statistic, or Silhouette score could be employed to determine an optimal value of `k`.
:::

#### Plot identified regions

We can use the `hatchingPlot` function to visualise all 5 regions and 17 cell types simultaneously for a specific image or set of images. The output is a `ggplot` object where the regions are marked by different hatching patterns. The `nbp` argument can be used to tune the granularity of the grid used for defining regions.

```{r 05-hatchingPlot, fig.height=7, fig.width=9, time_it = TRUE}
hatchingPlot(kerenSPE, useImages = 5, nbp = 300)
```

In accordance with the `regionMap` output, we can see that region 5 is mostly made up of tumour cells, and region 2 and 4 both contain our immune cell populations.

::: {.callout-tip title="Combining localisation scores with spatial domains"}
**How could results from lisaClust be used in conjunction with results from spicyR?**

lisaClust provides a high-resolution view of the tissue architecture, while spicyR can quantify how these spatial relationships or features contribute to clinical outcomes. spicyR's L-function metric can be used to determine the degree of localisation or dispersion between different spatial domains. For instance, we can look at co-localisation between region 5 (our tumour cells) and regions 2 or 4 (our immune cells).
:::

## sessionInfo

```{r}
sessionInfo()
```
