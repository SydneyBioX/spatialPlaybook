# scClassify: Cell annotation

[scClassify](https://new.bioconductor.org/packages/release/bioc/html/scClassify.html) is a supervised multiscale classification framework for scRNAseq data based on ensemble learning and cell type hierarchies. scClassify first constructs a cell type tree using the reference dataset, and then builds an ensemble weighted kNN classifier at each node. Users can select any combination of six correlation/similarity metrics and five marker selection methods to build the kNN model. This results in up to 30 base classifiers that can be constructed for each node of the cell type tree.

To demonstrate the use of scClassify, we will use the Stickels 2021 dataset, which examines mouse brain tissue from the hippocampus and surrounding regions. It is available through the `STexampleData` package. We will select samples 21-24 for demonstration purposes.

```{r, warning = FALSE, message = FALSE}
library(scClassify)
library(STexampleData)
library(MLmetrics)
library(scuttle)
```

```{r warning = FALSE, message = FALSE}
stickelsSPE = STexampleData::SlideSeqV2_mouseHPC()

# remove missing celltype values
stickelsSPE = stickelsSPE[, !is.na(stickelsSPE$celltype)]
stickelsSPE
```

The dataset contains 17 unique cell types.

```{r}
stickelsSPE$celltype |> unique()
```

As scClassify requires log-normalised expression data, we will use `normalizeCounts` from the `scuttle` package to transform and normalise our expression data.

```{r}
# log normalisation
norm_assay = normalizeCounts(stickelsSPE, transform = "log", BPPARAM = BiocParallel::MulticoreParam(workers = 8))

# store normalised expression data in the "norm" slot
assay(stickelsSPE, "norm") = norm_assay
```

We will first split the dataset into an 80% training or reference dataset and a 20% testing or query dataset.

```{r}
set.seed(51773)

# split into 80% reference and 20% query
ref_idx = sample(seq_len(ncol(stickelsSPE)), size = 0.8 * ncol(stickelsSPE))
ref_spe = stickelsSPE[, ref_idx]
query_spe = stickelsSPE[, -ref_idx]

# access expression data as matrix
ref_mat = assay(ref_spe, "norm")
query_mat = assay(query_spe, "norm")
```

## Using scClassify

`scClassify` is the main classification function within scClassify. It requires a reference expression matrix (`exprsMat_train`) and the corresponding vector of cell type labels as input (`cellTypes_train`). We then specify our query matrix (`exprsMat_test`) and the corresponding cell type labels (`cellTypes_test`) in the form of lists. Below, we have also specified the following customisations for building the model -

-   `tree = HOPACH`: use the HOPACH algorithm to build a cell type hierarchy.
-   `algorithm = WKNN`: use the weighted KNN model
-   `selectFeatures = c("limma")`: identify differentially expressed (DE) genes using `limma`, which will be used as features to build the WKNN model. Other options to select features include differentially variable (DV) genes, differentially distributed (DD), bimodally distributed (BI) and differentially expressed proportions.
-   `c("pearson", "spearman", "cosine")`: use Pearson and Spearman correlation to measure similarity between cells. Other options include Kendall's correlation, cosine distance, Jaccard distance, Manhattan distance, and weighted rank correlation.

```{r, warning = FALSE, message=FALSE}
scClassify_res = scClassify(exprsMat_train = ref_mat,
                            cellTypes_train = ref_spe$celltype,
                            exprsMat_test = list(stickels = query_mat),
                            cellTypes_test = list(stickels = query_spe$celltype),
                            tree = "HOPACH",
                            algorithm = "WKNN",
                            selectFeatures = c("limma"),
                            similarity = c("pearson", "spearman"),
                            returnList = FALSE,
                            parallel = TRUE,
                            BPPARAM = BiocParallel::MulticoreParam(workers = 8),
                            verbose = FALSE)
```

The output is a list containing all model building and testing information. The `testRes` slot contains the results of testing the model on the query dataset, and the `trainRes` contains the model built from the reference dataset.

```{r, eval = FALSE}
scClassify_res$trainRes
```

We can then examine the cell type tree generated by the reference dataset.

```{r, eval = FALSE}
plotCellTypeTree(cellTypeTree(scClassify_res$trainRes))
```

The predictions for each cell can be accessed through the `ensembleRes` slot in the testing results.

```{r, eval = FALSE}
pred_mat = scClassify_res$testRes$stickels$ensembleRes |> as.data.frame()
head(pred_mat)
```

## Evaluating performance

We will evaluate scClassify's performance using 4 metrics - accuracy, precision, recall, and F1 Score.

```{r}
# accuracy
MLmetrics::Accuracy(query_spe$celltype, pred_mat$cellTypes)
```

```{r}
# precision
MLmetrics::Precision(query_spe$celltype, pred_mat$cellTypes)
```

```{r}
# recall
MLmetrics::Recall(query_spe$celltype, pred_mat$cellTypes)
```

```{r}
# recall
MLmetrics::F1_Score(query_spe$celltype, pred_mat$cellTypes)
```

## sessionInfo

```{r}
sessionInfo()
```
