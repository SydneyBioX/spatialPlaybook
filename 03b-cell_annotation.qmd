# Supervised cell annotation with a reference

```{r 03b-code chunk timing, include = FALSE}
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      # record the current time before each chunk
      now <<- Sys.time()
    } else {
      # calculate the time difference after a chunk
      res <- difftime(Sys.time(), now, units = "secs")
      # return a character string to show the time in bold and right-aligned, with extra spacing
      paste("<div style='text-align: right;'><em>Time for this code chunk to run with ", nCores, "cores: ", round(res, 2), "s</div></em>")
    }
  }
}))
```

The other approach to identifying cell types involves using an annotated reference dataset to assign labels for a query dataset. In this section, we will demonstrate how our package **scClassify** can be used for supervised cell type annotation.

```{r 03b-load libraries, echo=FALSE, results="hide", warning=FALSE}
suppressPackageStartupMessages({
  library(scClassify)
  library(STexampleData)
  library(MLmetrics)
  library(scuttle)
  library(scater)
  library(caret)
  library(ggplot2)
})
```

```{r 03b-libraries, eval = FALSE}
# load required libraries
library(scClassify)
library(STexampleData)
library(MLmetrics)
library(scuttle)
library(scater)
library(caret)
library(ggplot2)
```

```{r 03b-set parameters}
# set parameters
set.seed(51773)

# whether to use multiple cores (recommended)
use_mc = TRUE
is_windows = .Platform$OS.type == "windows"

if (use_mc) {
  nCores = max(ceiling(parallel::detectCores() / 2), 1)
  
  if (nCores == 1) {
    BPPARAM = BiocParallel::SerialParam()
  } else if (is_windows) {
    BPPARAM = BiocParallel::SnowParam(workers = nCores, type = "SOCK")
  } else {
    BPPARAM = BiocParallel::MulticoreParam(workers = nCores)
  }
} else {
  BPPARAM = BiocParallel::SerialParam()
}

theme_set(theme_classic())
```

# scClassify: Cell annotation

[scClassify](https://new.bioconductor.org/packages/release/bioc/html/scClassify.html) is a supervised multiscale classification framework for single-cell data based on ensemble learning and cell type hierarchies. scClassify first constructs a cell type tree using the reference dataset, and then builds an ensemble weighted kNN classifier at each node. Users can select any combination of six correlation/similarity metrics and five marker selection methods to build the kNN model. This results in up to 30 base classifiers that can be constructed for each node of the cell type tree.

<img src="images/scClassify_fig1.png" align="center" style="height:310px; border: 0px"/>

To demonstrate the use of scClassify, we will use the [Stickels 2021](datasets.qmd) dataset, which examines mouse brain tissue from the hippocampus and surrounding regions. It is available through the `STexampleData` package.

```{r 03b-load Stickels data, warning = FALSE, message = FALSE}
stickelsSPE = STexampleData::SlideSeqV2_mouseHPC()
stickelsSPE
```

The dataset contains 17 unique cell types.

```{r 03b-Stickels celltypes}
stickelsSPE$celltype |> unique()
```

As scClassify requires log-normalised expression data, we will use `normalizeCounts` from the `scuttle` package to transform and normalise our expression data.

```{r 03b-log nCoresormalisation}
# log normalisation
norm_assay = normalizeCounts(stickelsSPE, transform = "log", 
                             BPPARAM = BPPARAM)

# store normalised expression data in the "norm" slot
assay(stickelsSPE, "norm", withDimnames = FALSE) = norm_assay
```

We will first split the dataset into an 80% training or reference dataset and a 20% testing or query dataset.

```{r 03b-split data}
set.seed(51773)

# split into 80% reference and 20% query
ref_idx = sample(seq_len(ncol(stickelsSPE)), size = 0.7 * ncol(stickelsSPE))
ref_spe = stickelsSPE[, ref_idx]
query_spe = stickelsSPE[, -ref_idx]

# access expression data as matrix
ref_mat = assay(ref_spe, "norm") |> as.matrix()
query_mat = assay(query_spe, "norm") |> as.matrix()
```

## Using scClassify

`scClassify` is the main classification function within scClassify. It requires a reference expression matrix (`exprsMat_train`) and the corresponding vector of cell type labels as input (`cellTypes_train`). We then specify our query matrix (`exprsMat_test`) and the corresponding cell type labels (`cellTypes_test`) in the form of lists. Below, we have also specified the following customisations for building the model -

-   `tree = HOPACH`: use the HOPACH algorithm to build a cell type hierarchy.
-   `algorithm = WKNN`: use the weighted KNN model
-   `selectFeatures = c("limma")`: identify differentially expressed (DE) genes using `limma`, which will be used as features to build the weighted KNN model. Other options to select features include differentially variable (DV) genes, differentially distributed (DD), bimodally distributed (BI) and differentially expressed proportions.
-   `c("pearson", "spearman", "cosine")`: use Pearson and Spearman correlation to measure similarity between cells. Other options include Kendall's correlation, cosine distance, Jaccard distance, Manhattan distance, and weighted rank correlation.

```{r 03b-scClassify, warning = FALSE, message=FALSE, time_it = TRUE, eval = FALSE}
scClassify_res = scClassify(exprsMat_train = ref_mat,
                            cellTypes_train = ref_spe$celltype,
                            exprsMat_test = list(stickels = query_mat),
                            cellTypes_test = list(stickels = query_spe$celltype),
                            tree = "HOPACH",
                            algorithm = "WKNN",
                            selectFeatures = c("limma"),
                            similarity = c("pearson", "spearman"),
                            returnList = FALSE,
                            parallel = TRUE,
                            BPPARAM = BPPARAM,
                            verbose = FALSE)
```

The output is a list containing all model building and testing information. The `testRes` slot contains the results of testing the model on the query dataset, and the `trainRes` slot contains the model built from the reference dataset.

```{r 03a-model, eval = FALSE}
scClassify_res$trainRes
```

<!-- We can then examine the cell type tree generated by the reference dataset. -->

```{r 03b-cell type tree, include = FALSE, eval = FALSE}
cellTypeTree(scClassify_res$trainRes) |> plotCellTypeTree()
```

The predictions for each cell can be accessed through the `ensembleRes` slot in the testing results.

```{r 03b-prediction results, eval = FALSE}
pred_mat = scClassify_res$testRes$human$ensembleRes |> as.data.frame()
head(pred_mat)
```

## Evaluating performance

```{r 03b-confusion matrix, eval = FALSE}
# convert predictions to factor
pred_mat$cellTypes = as.factor(pred_mat$cellTypes)

# ensure both ground truth and predictions have the same levels
combined_levels = union(levels(pred_mat$cellTypes), levels(query_spe$celltype))
levels(query_spe$celltype) = combined_levels
levels(pred_mat$cellTypes) = combined_levels

conf_matrix = confusionMatrix(data = pred_mat$cellTypes,
                reference = query_spe$celltypes)

conf_matrix$overall
```

```{r 03b-eval metrics, eval = FALSE}
recall = MLmetrics::Recall(y_pred = pred_mat$cellTypes,
                                 y_true = query_spe$celltype)
precision = MLmetrics::Precision(y_pred = pred_mat$cellTypes,
                                   y_true = query_spe$celltype)
f1_score = MLmetrics::F1_Score(y_pred = pred_mat$cellTypes,
                                 y_true = query_spe$celltype)

cat("Recall:", recall, "\n")
cat("Precision:", precision, "\n")
cat("F1-Score:", f1_score, "\n")

```

```{r 03beval plot, eval = FALSE}
results = data.frame(trueLabel = query_spe$celltype,
                     predictedLabel = pred_mat$cellTypes)

results = dplyr::mutate(results, classification = dplyr::case_when(
  predictedLabel != trueLabel ~ "incorrectly classified",
  predictedLabel == trueLabel ~ "correctly classified",
  predictedLabel == "unassigned" ~ "incorrectly unassigned"
))

ggplot(results, aes(x = trueLabel, fill = classification)) + 
  geom_bar(position = "fill")

```

<!-- ## Choosing between clustering and annotation -->

## sessionInfo

```{r}
sessionInfo()
```
